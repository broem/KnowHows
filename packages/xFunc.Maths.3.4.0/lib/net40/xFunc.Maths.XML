<?xml version="1.0"?>
<doc>
    <assembly>
        <name>xFunc.Maths</name>
    </assembly>
    <members>
        <member name="T:xFunc.Maths.Analyzers.Analyzer`1">
            <summary>
            The abstract class with default Analyzer API realization. It's useful where you don't need to implement whole interface (just a few methods).
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <seealso cref="T:xFunc.Maths.Analyzers.IAnalyzer`1" />
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.Abs)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.Add)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.Ceil)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.Define)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.Del)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.Derivative)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.Div)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.Exp)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.Fact)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.Floor)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.GCD)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.Lb)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.LCM)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.Lg)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.Ln)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.Log)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.Mod)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.Mul)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.Number)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.Pow)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.Root)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.Round)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.Simplify)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.Sqrt)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.Sub)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.UnaryMinus)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.Undefine)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.UserFunction)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.Variable)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.DelegateExpression)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.Matrices.Vector)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.Matrices.Matrix)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.Matrices.Determinant)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.Matrices.Inverse)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.Matrices.Transpose)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.ComplexNumbers.ComplexNumber)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.ComplexNumbers.Conjugate)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.ComplexNumbers.Im)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.ComplexNumbers.Phase)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.ComplexNumbers.Re)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.ComplexNumbers.Reciprocal)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.Trigonometric.Arccos)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.Trigonometric.Arccot)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.Trigonometric.Arccsc)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.Trigonometric.Arcsec)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.Trigonometric.Arcsin)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.Trigonometric.Arctan)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.Trigonometric.Cos)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.Trigonometric.Cot)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.Trigonometric.Csc)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.Trigonometric.Sec)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.Trigonometric.Sin)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.Trigonometric.Tan)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.Hyperbolic.Arcosh)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.Hyperbolic.Arcoth)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.Hyperbolic.Arcsch)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.Hyperbolic.Arsech)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.Hyperbolic.Arsinh)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.Hyperbolic.Artanh)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.Hyperbolic.Cosh)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.Hyperbolic.Coth)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.Hyperbolic.Csch)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.Hyperbolic.Sech)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.Hyperbolic.Sinh)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.Hyperbolic.Tanh)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.Statistical.Avg)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.Statistical.Count)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.Statistical.Max)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.Statistical.Min)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.Statistical.Product)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.Statistical.Stdev)">
            <summary>
            Analyzes the specified exppression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.Statistical.Stdevp)">
            <summary>
            Analyzes the specified exppression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.Statistical.Sum)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.Statistical.Var)">
            <summary>
            Analyzes the specified exppression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.Statistical.Varp)">
            <summary>
            Analyzes the specified exppression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.LogicalAndBitwise.And)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.LogicalAndBitwise.Bool)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.LogicalAndBitwise.Equality)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.LogicalAndBitwise.Implication)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.LogicalAndBitwise.NAnd)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.LogicalAndBitwise.NOr)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.LogicalAndBitwise.Not)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.LogicalAndBitwise.Or)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.LogicalAndBitwise.XOr)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.Programming.AddAssign)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.Programming.And)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.Programming.Dec)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.Programming.DivAssign)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.Programming.Equal)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.Programming.For)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.Programming.GreaterOrEqual)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.Programming.GreaterThan)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.Programming.If)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.Programming.Inc)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.Programming.LessOrEqual)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.Programming.LessThan)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.Programming.MulAssign)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.Programming.NotEqual)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.Programming.Or)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.Programming.SubAssign)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Analyzer`1.Analyze(xFunc.Maths.Expressions.Programming.While)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="T:xFunc.Maths.Analyzers.Differentiator">
            <summary>
            The differentiator of expressions.
            </summary>
            <seealso cref="T:xFunc.Maths.Analyzers.Analyzer`1" />
            <seealso cref="T:xFunc.Maths.Analyzers.IDifferentiator" />
        </member>
        <member name="M:xFunc.Maths.Analyzers.Differentiator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Analyzers.Differentiator"/> class.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Differentiator.#ctor(xFunc.Maths.Expressions.Variable)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Analyzers.Differentiator"/> class.
            </summary>
            <param name="variable">The variable.</param>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Differentiator.#ctor(xFunc.Maths.Expressions.ExpressionParameters,xFunc.Maths.Expressions.Variable)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Analyzers.Differentiator"/> class.
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="variable">The variable.</param>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Differentiator.Analyze(xFunc.Maths.Expressions.Abs)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Differentiator.Analyze(xFunc.Maths.Expressions.Add)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Differentiator.Analyze(xFunc.Maths.Expressions.Derivative)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Differentiator.Analyze(xFunc.Maths.Expressions.Div)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Differentiator.Analyze(xFunc.Maths.Expressions.Exp)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Differentiator.Analyze(xFunc.Maths.Expressions.Lb)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Differentiator.Analyze(xFunc.Maths.Expressions.Lg)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Differentiator.Analyze(xFunc.Maths.Expressions.Ln)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Differentiator.Analyze(xFunc.Maths.Expressions.Log)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Differentiator.Analyze(xFunc.Maths.Expressions.Mul)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Differentiator.Analyze(xFunc.Maths.Expressions.Number)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Differentiator.Analyze(xFunc.Maths.Expressions.Pow)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Differentiator.Analyze(xFunc.Maths.Expressions.Root)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Differentiator.Analyze(xFunc.Maths.Expressions.Simplify)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Differentiator.Analyze(xFunc.Maths.Expressions.Sqrt)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Differentiator.Analyze(xFunc.Maths.Expressions.Sub)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Differentiator.Analyze(xFunc.Maths.Expressions.UnaryMinus)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Differentiator.Analyze(xFunc.Maths.Expressions.UserFunction)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Differentiator.Analyze(xFunc.Maths.Expressions.Variable)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Differentiator.Analyze(xFunc.Maths.Expressions.Trigonometric.Arccos)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Differentiator.Analyze(xFunc.Maths.Expressions.Trigonometric.Arccot)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Differentiator.Analyze(xFunc.Maths.Expressions.Trigonometric.Arccsc)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Differentiator.Analyze(xFunc.Maths.Expressions.Trigonometric.Arcsec)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Differentiator.Analyze(xFunc.Maths.Expressions.Trigonometric.Arcsin)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Differentiator.Analyze(xFunc.Maths.Expressions.Trigonometric.Arctan)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Differentiator.Analyze(xFunc.Maths.Expressions.Trigonometric.Cos)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Differentiator.Analyze(xFunc.Maths.Expressions.Trigonometric.Cot)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Differentiator.Analyze(xFunc.Maths.Expressions.Trigonometric.Csc)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Differentiator.Analyze(xFunc.Maths.Expressions.Trigonometric.Sec)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Differentiator.Analyze(xFunc.Maths.Expressions.Trigonometric.Sin)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Differentiator.Analyze(xFunc.Maths.Expressions.Trigonometric.Tan)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Differentiator.Analyze(xFunc.Maths.Expressions.Hyperbolic.Arcosh)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Differentiator.Analyze(xFunc.Maths.Expressions.Hyperbolic.Arcoth)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Differentiator.Analyze(xFunc.Maths.Expressions.Hyperbolic.Arcsch)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Differentiator.Analyze(xFunc.Maths.Expressions.Hyperbolic.Arsech)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Differentiator.Analyze(xFunc.Maths.Expressions.Hyperbolic.Arsinh)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Differentiator.Analyze(xFunc.Maths.Expressions.Hyperbolic.Artanh)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Differentiator.Analyze(xFunc.Maths.Expressions.Hyperbolic.Cosh)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Differentiator.Analyze(xFunc.Maths.Expressions.Hyperbolic.Coth)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Differentiator.Analyze(xFunc.Maths.Expressions.Hyperbolic.Csch)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Differentiator.Analyze(xFunc.Maths.Expressions.Hyperbolic.Sech)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Differentiator.Analyze(xFunc.Maths.Expressions.Hyperbolic.Sinh)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Differentiator.Analyze(xFunc.Maths.Expressions.Hyperbolic.Tanh)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="P:xFunc.Maths.Analyzers.Differentiator.Variable">
            <summary>
            Gets or sets the variable.
            </summary>
            <value>
            The variable.
            </value>
        </member>
        <member name="P:xFunc.Maths.Analyzers.Differentiator.Parameters">
            <summary>
            Gets or sets the parameters.
            </summary>
            <value>
            The parameters.
            </value>
        </member>
        <member name="T:xFunc.Maths.Analyzers.Formatters.CommonFormatter">
            <summary>
            Converts expressions into string.
            </summary>
            <seealso cref="T:xFunc.Maths.Analyzers.Formatters.IFormatter" />
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Analyzers.Formatters.CommonFormatter"/> class.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.Abs)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.Add)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.Ceil)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.Define)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.Del)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.Derivative)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.Div)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.Exp)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.Fact)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.Floor)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.GCD)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.Lb)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.LCM)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.Lg)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.Ln)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.Log)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.Mod)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.Mul)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.Number)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.Pow)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.Root)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.Round)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.Simplify)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.Sqrt)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.Sub)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.UnaryMinus)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.Undefine)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.UserFunction)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.Variable)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.DelegateExpression)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.Matrices.Vector)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.Matrices.Matrix)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.Matrices.Determinant)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.Matrices.Inverse)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.Matrices.Transpose)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.ComplexNumbers.ComplexNumber)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.ComplexNumbers.Conjugate)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.ComplexNumbers.Im)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.ComplexNumbers.Phase)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.ComplexNumbers.Re)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.ComplexNumbers.Reciprocal)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.Trigonometric.Arccos)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.Trigonometric.Arccot)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.Trigonometric.Arccsc)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.Trigonometric.Arcsec)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.Trigonometric.Arcsin)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.Trigonometric.Arctan)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.Trigonometric.Cos)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.Trigonometric.Cot)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.Trigonometric.Csc)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.Trigonometric.Sec)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.Trigonometric.Sin)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.Trigonometric.Tan)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.Hyperbolic.Arcosh)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.Hyperbolic.Arcoth)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.Hyperbolic.Arcsch)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.Hyperbolic.Arsech)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.Hyperbolic.Arsinh)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.Hyperbolic.Artanh)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.Hyperbolic.Cosh)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.Hyperbolic.Coth)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.Hyperbolic.Csch)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.Hyperbolic.Sech)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.Hyperbolic.Sinh)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.Hyperbolic.Tanh)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.Statistical.Avg)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.Statistical.Count)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expresion.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.Statistical.Max)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.Statistical.Min)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.Statistical.Product)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.Statistical.Stdev)">
            <summary>
            Analyzes the specified exppression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.Statistical.Stdevp)">
            <summary>
            Analyzes the specified exppression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.Statistical.Sum)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.Statistical.Var)">
            <summary>
            Analyzes the specified exppression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.Statistical.Varp)">
            <summary>
            Analyzes the specified exppression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.LogicalAndBitwise.And)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.LogicalAndBitwise.Bool)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.LogicalAndBitwise.Equality)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.LogicalAndBitwise.Implication)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.LogicalAndBitwise.NAnd)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.LogicalAndBitwise.NOr)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.LogicalAndBitwise.Not)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.LogicalAndBitwise.Or)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.LogicalAndBitwise.XOr)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.Programming.AddAssign)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.Programming.And)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.Programming.Dec)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.Programming.DivAssign)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.Programming.Equal)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.Programming.For)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.Programming.GreaterOrEqual)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.Programming.GreaterThan)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.Programming.If)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.Programming.Inc)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.Programming.LessOrEqual)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.Programming.LessThan)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.Programming.MulAssign)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.Programming.NotEqual)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.Programming.Or)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.Programming.SubAssign)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Formatters.CommonFormatter.Analyze(xFunc.Maths.Expressions.Programming.While)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="T:xFunc.Maths.Analyzers.Formatters.IFormatter">
            <summary>
            The common interface for expression formatters.
            </summary>
            <seealso cref="T:xFunc.Maths.Analyzers.IAnalyzer`1" />
        </member>
        <member name="T:xFunc.Maths.Analyzers.IAnalyzer`1">
            <summary>
            The interface for analyzers.
            </summary>
            <typeparam name="TResult">The type of the result of analysis.</typeparam>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.Abs)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.Add)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.Ceil)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.Define)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.Del)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.Derivative)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.Div)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.Exp)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.Fact)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.Floor)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.GCD)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.Lb)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.LCM)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.Lg)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.Ln)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.Log)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.Mod)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.Mul)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.Number)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.Pow)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.Root)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.Round)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.Simplify)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.Sqrt)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.Sub)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.UnaryMinus)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.Undefine)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.UserFunction)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.Variable)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.DelegateExpression)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.Matrices.Vector)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.Matrices.Matrix)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.Matrices.Determinant)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.Matrices.Inverse)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.Matrices.Transpose)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.ComplexNumbers.ComplexNumber)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.ComplexNumbers.Conjugate)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.ComplexNumbers.Im)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.ComplexNumbers.Phase)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.ComplexNumbers.Re)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.ComplexNumbers.Reciprocal)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.Trigonometric.Arccos)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.Trigonometric.Arccot)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.Trigonometric.Arccsc)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.Trigonometric.Arcsec)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.Trigonometric.Arcsin)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.Trigonometric.Arctan)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.Trigonometric.Cos)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.Trigonometric.Cot)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.Trigonometric.Csc)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.Trigonometric.Sec)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.Trigonometric.Sin)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.Trigonometric.Tan)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.Hyperbolic.Arcosh)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.Hyperbolic.Arcoth)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.Hyperbolic.Arcsch)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.Hyperbolic.Arsech)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.Hyperbolic.Arsinh)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.Hyperbolic.Artanh)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.Hyperbolic.Cosh)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.Hyperbolic.Coth)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.Hyperbolic.Csch)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.Hyperbolic.Sech)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.Hyperbolic.Sinh)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.Hyperbolic.Tanh)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.Statistical.Avg)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.Statistical.Count)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expresion.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.Statistical.Max)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.Statistical.Min)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.Statistical.Product)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.Statistical.Stdev)">
            <summary>
            Analyzes the specified exppression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.Statistical.Stdevp)">
            <summary>
            Analyzes the specified exppression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.Statistical.Sum)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.Statistical.Var)">
            <summary>
            Analyzes the specified exppression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.Statistical.Varp)">
            <summary>
            Analyzes the specified exppression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.LogicalAndBitwise.And)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.LogicalAndBitwise.Bool)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.LogicalAndBitwise.Equality)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.LogicalAndBitwise.Implication)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.LogicalAndBitwise.NAnd)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.LogicalAndBitwise.NOr)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.LogicalAndBitwise.Not)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.LogicalAndBitwise.Or)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.LogicalAndBitwise.XOr)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.Programming.AddAssign)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.Programming.And)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.Programming.Dec)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.Programming.DivAssign)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.Programming.Equal)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.Programming.For)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.Programming.GreaterOrEqual)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.Programming.GreaterThan)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.Programming.If)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.Programming.Inc)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.Programming.LessOrEqual)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.Programming.LessThan)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.Programming.MulAssign)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.Programming.NotEqual)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.Programming.Or)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.Programming.SubAssign)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.IAnalyzer`1.Analyze(xFunc.Maths.Expressions.Programming.While)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>The result of analysis.</returns>
        </member>
        <member name="T:xFunc.Maths.Analyzers.Simplifier">
            <summary>
            The simplifier of expressions.
            </summary>
            <seealso cref="T:xFunc.Maths.Analyzers.IAnalyzer`1" />
            <seealso cref="T:xFunc.Maths.Analyzers.ISimplifier" />
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Analyzers.Simplifier"/> class.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.Abs)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.Add)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.Ceil)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.Define)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.Del)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.Derivative)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.Div)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.Exp)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.Fact)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.Floor)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.GCD)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.Lb)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.LCM)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.Lg)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.Ln)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.Log)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.Mod)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.Mul)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.Number)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.Pow)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.Root)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.Round)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.Simplify)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.Sqrt)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.Sub)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.UnaryMinus)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.Undefine)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.UserFunction)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.Variable)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.DelegateExpression)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.Matrices.Vector)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.Matrices.Matrix)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.Matrices.Determinant)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.Matrices.Inverse)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.Matrices.Transpose)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.ComplexNumbers.ComplexNumber)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.ComplexNumbers.Conjugate)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.ComplexNumbers.Im)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.ComplexNumbers.Phase)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.ComplexNumbers.Re)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.ComplexNumbers.Reciprocal)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.Trigonometric.Arccos)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.Trigonometric.Arccot)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.Trigonometric.Arccsc)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.Trigonometric.Arcsec)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.Trigonometric.Arcsin)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.Trigonometric.Arctan)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.Trigonometric.Cos)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.Trigonometric.Cot)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.Trigonometric.Csc)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.Trigonometric.Sec)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.Trigonometric.Sin)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.Trigonometric.Tan)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.Hyperbolic.Arcosh)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.Hyperbolic.Arcoth)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.Hyperbolic.Arcsch)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.Hyperbolic.Arsech)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.Hyperbolic.Arsinh)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.Hyperbolic.Artanh)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.Hyperbolic.Cosh)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.Hyperbolic.Coth)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.Hyperbolic.Csch)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.Hyperbolic.Sech)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.Hyperbolic.Sinh)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.Hyperbolic.Tanh)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.Statistical.Avg)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.Statistical.Count)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.Statistical.Max)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.Statistical.Min)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.Statistical.Product)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.Statistical.Stdev)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.Statistical.Stdevp)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.Statistical.Sum)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.Statistical.Var)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.Statistical.Varp)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.LogicalAndBitwise.And)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.LogicalAndBitwise.Bool)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.LogicalAndBitwise.Equality)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.LogicalAndBitwise.Implication)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.LogicalAndBitwise.NAnd)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.LogicalAndBitwise.NOr)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.LogicalAndBitwise.Not)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.LogicalAndBitwise.Or)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.LogicalAndBitwise.XOr)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.Programming.AddAssign)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.Programming.And)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.Programming.Dec)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.Programming.DivAssign)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.Programming.Equal)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.Programming.For)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.Programming.GreaterOrEqual)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.Programming.GreaterThan)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.Programming.If)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.Programming.Inc)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.Programming.LessOrEqual)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.Programming.LessThan)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.Programming.MulAssign)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.Programming.NotEqual)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.Programming.Or)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.Programming.SubAssign)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Analyzers.Simplifier.Analyze(xFunc.Maths.Expressions.Programming.While)">
            <summary>
            Analyzes the specified expression.
            </summary>
            <param name="exp">The expression.</param>
            <returns>
            The result of analysis.
            </returns>
        </member>
        <member name="T:xFunc.Maths.Analyzers.IDifferentiator">
            <summary>
            The interface for differentiator.
            </summary>
        </member>
        <member name="P:xFunc.Maths.Analyzers.IDifferentiator.Variable">
            <summary>
            Gets or sets the variable.
            </summary>
            <value>
            The variable.
            </value>
        </member>
        <member name="P:xFunc.Maths.Analyzers.IDifferentiator.Parameters">
            <summary>
            Gets or sets the parameters.
            </summary>
            <value>
            The parameters.
            </value>
        </member>
        <member name="T:xFunc.Maths.Analyzers.ISimplifier">
            <summary>
            The interface for mathematical expression simplifier.
            </summary>
        </member>
        <member name="T:xFunc.Maths.Builder">
            <summary>
            The expression builder.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Builder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Builder"/> class.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Builder.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Builder"/> class.
            </summary>
            <param name="initial">The initial value of builder.</param>
        </member>
        <member name="M:xFunc.Maths.Builder.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Builder"/> class.
            </summary>
            <param name="number">The initial value of builder.</param>
        </member>
        <member name="M:xFunc.Maths.Builder.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Builder"/> class.
            </summary>
            <param name="variable">The initial value of builder.</param>
        </member>
        <member name="M:xFunc.Maths.Builder.ToString(xFunc.Maths.Analyzers.Formatters.IFormatter)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="formatter">The formatter.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Builder.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Builder.Create(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Creates the builder.
            </summary>
            <param name="initial">The initial value of builder.</param>
            <returns>The new instance of builder.</returns>
        </member>
        <member name="M:xFunc.Maths.Builder.Create(System.Double)">
            <summary>
            Creates the builder.
            </summary>
            <param name="number">The initial value of builder.</param>
            <returns>The new instance of builder.</returns>
        </member>
        <member name="M:xFunc.Maths.Builder.Create(System.String)">
            <summary>
            Creates the builder.
            </summary>
            <param name="variable">The initial value of builder.</param>
            <returns>The new instance of builder.</returns>
        </member>
        <member name="M:xFunc.Maths.Builder.Init(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes the builder.
            </summary>
            <param name="initial">The initial value of builder.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:xFunc.Maths.Builder.Init(System.Double)">
            <summary>
            Initializes the builder.
            </summary>
            <param name="number">The initial value of builder.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:xFunc.Maths.Builder.Init(System.String)">
            <summary>
            Initializes the builder.
            </summary>
            <param name="variable">The initial value of builder.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:xFunc.Maths.Builder.Expression(System.Func{xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.IExpression})">
            <summary>
            Inserts a custom expression to builder.
            </summary>
            <param name="customExpression">The custom expression.</param>
            <returns>The current instance of builder.</returns>
        </member>
        <member name="M:xFunc.Maths.Builder.Add(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Creates the <seealso cref="T:xFunc.Maths.Expressions.Add"/> operation. The current state is used as summand.
            </summary>
            <param name="summand">The summand (expression).</param>
            <returns>The builder.</returns>
            <exception cref="T:System.ArgumentNullException">The current builder is empty.</exception>
        </member>
        <member name="M:xFunc.Maths.Builder.Add(System.Double)">
            <summary>
            Creates the <seealso cref="T:xFunc.Maths.Expressions.Add"/> operation. The current state is used as summand.
            </summary>
            <param name="summand">The summand (number).</param>
            <returns>The builder.</returns>
            <exception cref="T:System.ArgumentNullException">The current builder is empty.</exception>
        </member>
        <member name="M:xFunc.Maths.Builder.Add(System.String)">
            <summary>
            Creates the <seealso cref="T:xFunc.Maths.Expressions.Add"/> operation. The current state is used as summand.
            </summary>
            <param name="summand">The summand (variable).</param>
            <returns>The builder.</returns>
            <exception cref="T:System.ArgumentNullException">The current builder is empty.</exception>
        </member>
        <member name="M:xFunc.Maths.Builder.Sub(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Creates the <seealso cref="T:xFunc.Maths.Expressions.Sub"/> operation. The current state is used as minuend.
            </summary>
            <param name="subtrahend">The subtrahend (expression).</param>
            <returns>The builder.</returns>
            <exception cref="T:System.ArgumentNullException">The current builder is empty.</exception>
        </member>
        <member name="M:xFunc.Maths.Builder.Sub(System.Double)">
            <summary>
            Creates the <seealso cref="T:xFunc.Maths.Expressions.Sub"/> operation. The current state is used as minuend.
            </summary>
            <param name="subtrahend">The subtrahend (number).</param>
            <returns>The builder.</returns>
            <exception cref="T:System.ArgumentNullException">The current builder is empty.</exception>
        </member>
        <member name="M:xFunc.Maths.Builder.Sub(System.String)">
            <summary>
            Creates the <seealso cref="T:xFunc.Maths.Expressions.Sub"/> operation. The current state is used as minuend.
            </summary>
            <param name="subtrahend">The subtrahend (variable).</param>
            <returns>The builder.</returns>
            <exception cref="T:System.ArgumentNullException">The current builder is empty.</exception>
        </member>
        <member name="M:xFunc.Maths.Builder.Mul(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Creates the <seealso cref="T:xFunc.Maths.Expressions.Mul"/> operation. The current state is used as factor.
            </summary>
            <param name="factor">The factor (expression).</param>
            <returns>The builder.</returns>
            <exception cref="T:System.ArgumentNullException">The current builder is empty.</exception>
        </member>
        <member name="M:xFunc.Maths.Builder.Mul(System.Double)">
            <summary>
            Creates the <seealso cref="T:xFunc.Maths.Expressions.Mul"/> operation. The current state is used as factor.
            </summary>
            <param name="factor">The factor (number).</param>
            <returns>The builder.</returns>
            <exception cref="T:System.ArgumentNullException">The current builder is empty.</exception>
        </member>
        <member name="M:xFunc.Maths.Builder.Mul(System.String)">
            <summary>
            Creates the <seealso cref="T:xFunc.Maths.Expressions.Mul"/> operation. The current state is used as factor.
            </summary>
            <param name="factor">The factor (variable).</param>
            <returns>The builder.</returns>
            <exception cref="T:System.ArgumentNullException">The current builder is empty.</exception>
        </member>
        <member name="M:xFunc.Maths.Builder.Div(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Creates the <seealso cref="T:xFunc.Maths.Expressions.Div"/> operation. The current state is used as numerator.
            </summary>
            <param name="denominator">The denominator (expression).</param>
            <returns>The builder.</returns>
            <exception cref="T:System.ArgumentNullException">The current builder is empty.</exception>
        </member>
        <member name="M:xFunc.Maths.Builder.Div(System.Double)">
            <summary>
            Creates the <seealso cref="T:xFunc.Maths.Expressions.Div"/> operation. The current state is used as numerator.
            </summary>
            <param name="denominator">The denominator (number).</param>
            <returns>The builder.</returns>
            <exception cref="T:System.ArgumentNullException">The current builder is empty.</exception>
        </member>
        <member name="M:xFunc.Maths.Builder.Div(System.String)">
            <summary>
            Creates the <seealso cref="T:xFunc.Maths.Expressions.Div"/> operation. The current state is used as numerator.
            </summary>
            <param name="denominator">The denominator (variable).</param>
            <returns>The builder.</returns>
            <exception cref="T:System.ArgumentNullException">The current builder is empty.</exception>
        </member>
        <member name="M:xFunc.Maths.Builder.Pow(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Creates the <seealso cref="T:xFunc.Maths.Expressions.Pow"/> operation. The current state is used as base of power.
            </summary>
            <param name="exponent">The exponent (expression).</param>
            <returns>The builder.</returns>
            <exception cref="T:System.ArgumentNullException">The current builder is empty.</exception>
        </member>
        <member name="M:xFunc.Maths.Builder.Pow(System.Double)">
            <summary>
            Creates the <seealso cref="T:xFunc.Maths.Expressions.Pow"/> operation. The current state is used as base of power.
            </summary>
            <param name="exponent">The exponent (number).</param>
            <returns>The builder.</returns>
            <exception cref="T:System.ArgumentNullException">The current builder is empty.</exception>
        </member>
        <member name="M:xFunc.Maths.Builder.Pow(System.String)">
            <summary>
            Creates the <seealso cref="T:xFunc.Maths.Expressions.Pow"/> operation. The current state is used as base of power.
            </summary>
            <param name="exponent">The exponent (variable).</param>
            <returns>The builder.</returns>
            <exception cref="T:System.ArgumentNullException">The current builder is empty.</exception>
        </member>
        <member name="M:xFunc.Maths.Builder.Sqrt">
            <summary>
            Creates the <seealso cref="T:xFunc.Maths.Expressions.Sqrt"/> function. The current state is used as argument.
            </summary>
            <returns>The builder.</returns>
            <exception cref="T:System.ArgumentNullException">The current builder is empty.</exception>
        </member>
        <member name="M:xFunc.Maths.Builder.Root(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Creates the <seealso cref="T:xFunc.Maths.Expressions.Root"/> operation. The current state is used as radicand.
            </summary>
            <param name="degree">The degree (expression).</param>
            <returns>The builder.</returns>
            <exception cref="T:System.ArgumentNullException">The current builder is empty.</exception>
        </member>
        <member name="M:xFunc.Maths.Builder.Root(System.Double)">
            <summary>
            Creates the <seealso cref="T:xFunc.Maths.Expressions.Root"/> operation. The current state is used as radicand.
            </summary>
            <param name="degree">The degree (number).</param>
            <returns>The builder.</returns>
            <exception cref="T:System.ArgumentNullException">The current builder is empty.</exception>
        </member>
        <member name="M:xFunc.Maths.Builder.Root(System.String)">
            <summary>
            Creates the <seealso cref="T:xFunc.Maths.Expressions.Root"/> operation. The current state is used as radicand.
            </summary>
            <param name="degree">The degree (variable).</param>
            <returns>The builder.</returns>
            <exception cref="T:System.ArgumentNullException">The current builder is empty.</exception>
        </member>
        <member name="M:xFunc.Maths.Builder.Abs">
            <summary>
            Creates the <seealso cref="T:xFunc.Maths.Expressions.Abs"/> function. The current state is used as argument.
            </summary>
            <returns>The builder.</returns>
            <exception cref="T:System.ArgumentNullException">The current builder is empty.</exception>
        </member>
        <member name="M:xFunc.Maths.Builder.Log(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Creates the <seealso cref="T:xFunc.Maths.Expressions.Log"/> operation. The current state is used as argument.
            </summary>
            <param name="base">The base (expression).</param>
            <returns>The builder.</returns>
            <exception cref="T:System.ArgumentNullException">The current builder is empty.</exception>
        </member>
        <member name="M:xFunc.Maths.Builder.Log(System.Double)">
            <summary>
            Creates the <seealso cref="T:xFunc.Maths.Expressions.Log"/> operation. The current state is used as argument.
            </summary>
            <param name="base">The base (number).</param>
            <returns>The builder.</returns>
            <exception cref="T:System.ArgumentNullException">The current builder is empty.</exception>
        </member>
        <member name="M:xFunc.Maths.Builder.Log(System.String)">
            <summary>
            Creates the <seealso cref="T:xFunc.Maths.Expressions.Log"/> operation. The current state is used as argument.
            </summary>
            <param name="base">The base (variable).</param>
            <returns>The builder.</returns>
            <exception cref="T:System.ArgumentNullException">The current builder is empty.</exception>
        </member>
        <member name="M:xFunc.Maths.Builder.Ln">
            <summary>
            Creates the <seealso cref="T:xFunc.Maths.Expressions.Ln"/> function. The current state is used as argument.
            </summary>
            <returns>The builder.</returns>
            <exception cref="T:System.ArgumentNullException">The current builder is empty.</exception>
        </member>
        <member name="M:xFunc.Maths.Builder.Lg">
            <summary>
            Creates the <seealso cref="T:xFunc.Maths.Expressions.Lg"/> function. The current state is used as argument.
            </summary>
            <returns>The builder.</returns>
            <exception cref="T:System.ArgumentNullException">The current builder is empty.</exception>
        </member>
        <member name="M:xFunc.Maths.Builder.Lb">
            <summary>
            Creates the <seealso cref="T:xFunc.Maths.Expressions.Lb"/> function. The current state is used as argument.
            </summary>
            <returns>The builder.</returns>
            <exception cref="T:System.ArgumentNullException">The current builder is empty.</exception>
        </member>
        <member name="M:xFunc.Maths.Builder.Sin">
            <summary>
            Creates the <seealso cref="T:xFunc.Maths.Expressions.Trigonometric.Sin"/> operation. The current state is used as argument.
            </summary>
            <returns>The builder.</returns>
            <exception cref="T:System.ArgumentNullException">The current builder is empty.</exception>
        </member>
        <member name="M:xFunc.Maths.Builder.Cos">
            <summary>
            Creates the <seealso cref="T:xFunc.Maths.Expressions.Trigonometric.Cos"/> operation. The current state is used as argument.
            </summary>
            <returns>The builder.</returns>
            <exception cref="T:System.ArgumentNullException">The current builder is empty.</exception>
        </member>
        <member name="M:xFunc.Maths.Builder.Tan">
            <summary>
            Creates the <seealso cref="T:xFunc.Maths.Expressions.Trigonometric.Tan"/> operation. The current state is used as argument.
            </summary>
            <returns>The builder.</returns>
            <exception cref="T:System.ArgumentNullException">The current builder is empty.</exception>
        </member>
        <member name="M:xFunc.Maths.Builder.Cot">
            <summary>
            Creates the <seealso cref="T:xFunc.Maths.Expressions.Trigonometric.Cot"/> operation. The current state is used as argument.
            </summary>
            <returns>The builder.</returns>
            <exception cref="T:System.ArgumentNullException">The current builder is empty.</exception>
        </member>
        <member name="M:xFunc.Maths.Builder.Sec">
            <summary>
            Creates the <seealso cref="T:xFunc.Maths.Expressions.Trigonometric.Sec"/> operation. The current state is used as argument.
            </summary>
            <returns>The builder.</returns>
            <exception cref="T:System.ArgumentNullException">The current builder is empty.</exception>
        </member>
        <member name="M:xFunc.Maths.Builder.Csc">
            <summary>
            Creates the <seealso cref="T:xFunc.Maths.Expressions.Trigonometric.Csc"/> operation. The current state is used as argument.
            </summary>
            <returns>The builder.</returns>
            <exception cref="T:System.ArgumentNullException">The current builder is empty.</exception>
        </member>
        <member name="M:xFunc.Maths.Builder.Arcsin">
            <summary>
            Creates the <seealso cref="T:xFunc.Maths.Expressions.Trigonometric.Arcsin"/> operation. The current state is used as argument.
            </summary>
            <returns>The builder.</returns>
            <exception cref="T:System.ArgumentNullException">The current builder is empty.</exception>
        </member>
        <member name="M:xFunc.Maths.Builder.Arccos">
            <summary>
            Creates the <seealso cref="T:xFunc.Maths.Expressions.Trigonometric.Arccos"/> operation. The current state is used as argument.
            </summary>
            <returns>The builder.</returns>
            <exception cref="T:System.ArgumentNullException">The current builder is empty.</exception>
        </member>
        <member name="M:xFunc.Maths.Builder.Arctan">
            <summary>
            Creates the <seealso cref="T:xFunc.Maths.Expressions.Trigonometric.Arctan"/> operation. The current state is used as argument.
            </summary>
            <returns>The builder.</returns>
            <exception cref="T:System.ArgumentNullException">The current builder is empty.</exception>
        </member>
        <member name="M:xFunc.Maths.Builder.Arccot">
            <summary>
            Creates the <seealso cref="T:xFunc.Maths.Expressions.Trigonometric.Arccot"/> operation. The current state is used as argument.
            </summary>
            <returns>The builder.</returns>
            <exception cref="T:System.ArgumentNullException">The current builder is empty.</exception>
        </member>
        <member name="M:xFunc.Maths.Builder.Arcsec">
            <summary>
            Creates the <seealso cref="T:xFunc.Maths.Expressions.Trigonometric.Arcsec"/> operation. The current state is used as argument.
            </summary>
            <returns>The builder.</returns>
            <exception cref="T:System.ArgumentNullException">The current builder is empty.</exception>
        </member>
        <member name="M:xFunc.Maths.Builder.Arccsc">
            <summary>
            Creates the <seealso cref="T:xFunc.Maths.Expressions.Trigonometric.Arccsc"/> operation. The current state is used as argument.
            </summary>
            <returns>The builder.</returns>
            <exception cref="T:System.ArgumentNullException">The current builder is empty.</exception>
        </member>
        <member name="M:xFunc.Maths.Builder.Sinh">
            <summary>
            Creates the <seealso cref="T:xFunc.Maths.Expressions.Hyperbolic.Sinh"/> operation. The current state is used as argument.
            </summary>
            <returns>The builder.</returns>
            <exception cref="T:System.ArgumentNullException">The current builder is empty.</exception>
        </member>
        <member name="M:xFunc.Maths.Builder.Cosh">
            <summary>
            Creates the <seealso cref="T:xFunc.Maths.Expressions.Hyperbolic.Cosh"/> operation. The current state is used as argument.
            </summary>
            <returns>The builder.</returns>
            <exception cref="T:System.ArgumentNullException">The current builder is empty.</exception>
        </member>
        <member name="M:xFunc.Maths.Builder.Tanh">
            <summary>
            Creates the <seealso cref="T:xFunc.Maths.Expressions.Hyperbolic.Tanh"/> operation. The current state is used as argument.
            </summary>
            <returns>The builder.</returns>
            <exception cref="T:System.ArgumentNullException">The current builder is empty.</exception>
        </member>
        <member name="M:xFunc.Maths.Builder.Coth">
            <summary>
            Creates the <seealso cref="T:xFunc.Maths.Expressions.Hyperbolic.Coth"/> operation. The current state is used as argument.
            </summary>
            <returns>The builder.</returns>
            <exception cref="T:System.ArgumentNullException">The current builder is empty.</exception>
        </member>
        <member name="M:xFunc.Maths.Builder.Sech">
            <summary>
            Creates the <seealso cref="T:xFunc.Maths.Expressions.Hyperbolic.Sech"/> operation. The current state is used as argument.
            </summary>
            <returns>The builder.</returns>
            <exception cref="T:System.ArgumentNullException">The current builder is empty.</exception>
        </member>
        <member name="M:xFunc.Maths.Builder.Csch">
            <summary>
            Creates the <seealso cref="T:xFunc.Maths.Expressions.Hyperbolic.Csch"/> operation. The current state is used as argument.
            </summary>
            <returns>The builder.</returns>
            <exception cref="T:System.ArgumentNullException">The current builder is empty.</exception>
        </member>
        <member name="M:xFunc.Maths.Builder.Arsinh">
            <summary>
            Creates the <seealso cref="T:xFunc.Maths.Expressions.Hyperbolic.Arsinh"/> operation. The current state is used as argument.
            </summary>
            <returns>The builder.</returns>
            <exception cref="T:System.ArgumentNullException">The current builder is empty.</exception>
        </member>
        <member name="M:xFunc.Maths.Builder.Arcosh">
            <summary>
            Creates the <seealso cref="T:xFunc.Maths.Expressions.Hyperbolic.Arcosh"/> operation. The current state is used as argument.
            </summary>
            <returns>The builder.</returns>
            <exception cref="T:System.ArgumentNullException">The current builder is empty.</exception>
        </member>
        <member name="M:xFunc.Maths.Builder.Artanh">
            <summary>
            Creates the <seealso cref="T:xFunc.Maths.Expressions.Hyperbolic.Artanh"/> operation. The current state is used as argument.
            </summary>
            <returns>The builder.</returns>
            <exception cref="T:System.ArgumentNullException">The current builder is empty.</exception>
        </member>
        <member name="M:xFunc.Maths.Builder.Arcoth">
            <summary>
            Creates the <seealso cref="T:xFunc.Maths.Expressions.Hyperbolic.Arcoth"/> operation. The current state is used as argument.
            </summary>
            <returns>The builder.</returns>
            <exception cref="T:System.ArgumentNullException">The current builder is empty.</exception>
        </member>
        <member name="M:xFunc.Maths.Builder.Arsech">
            <summary>
            Creates the <seealso cref="T:xFunc.Maths.Expressions.Hyperbolic.Arsech"/> operation. The current state is used as argument.
            </summary>
            <returns>The builder.</returns>
            <exception cref="T:System.ArgumentNullException">The current builder is empty.</exception>
        </member>
        <member name="M:xFunc.Maths.Builder.Arcsch">
            <summary>
            Creates the <seealso cref="T:xFunc.Maths.Expressions.Hyperbolic.Arcsch"/> operation. The current state is used as argument.
            </summary>
            <returns>The builder.</returns>
            <exception cref="T:System.ArgumentNullException">The current builder is empty.</exception>
        </member>
        <member name="M:xFunc.Maths.Builder.Execute">
            <summary>
            Executes this expression. Don't use this method if your expression has variables or user-functions.
            </summary>
            <returns>
            A result of the execution.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Builder.Execute(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Builder.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Builder.Clone">
            <summary>
            Clones this instance of the <see cref="T:xFunc.Maths.Expressions.IExpression" />.
            </summary>
            <returns>
            Returns the new instance of <see cref="T:xFunc.Maths.Expressions.IExpression" /> that is a clone of this instance.
            </returns>
        </member>
        <member name="P:xFunc.Maths.Builder.Parent">
            <summary>
            Get or Set the parent expression.
            </summary>
            <exception cref="T:System.NotImplementedException">Always.</exception>
        </member>
        <member name="P:xFunc.Maths.Builder.MinParameters">
            <summary>
            Gets the minimum count of parameters.
            </summary>
            <value>
            The minimum count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Builder.MaxParameters">
            <summary>
            Gets the maximum count of parameters. -1 - Infinity.
            </summary>
            <value>
            The maximum count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Builder.ParametersCount">
            <summary>
            Gets the count of parameters.
            </summary>
            <value>
            The count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Builder.ResultType">
            <summary>
            Gets the type of the result.
            </summary>
            <value>
            The type of the result.
            </value>
        </member>
        <member name="P:xFunc.Maths.Builder.Current">
            <summary>
            Gets the current expression.
            </summary>
            <value>
            The current expression.
            </value>
        </member>
        <member name="T:xFunc.Maths.DefaultDependencyResolver">
            <summary>
            The default implementation of methods to resolve object for post-parse process.
            </summary>
        </member>
        <member name="M:xFunc.Maths.DefaultDependencyResolver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.DefaultDependencyResolver"/> class.
            </summary>
        </member>
        <member name="M:xFunc.Maths.DefaultDependencyResolver.#ctor(System.Type[],System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.DefaultDependencyResolver" /> class.
            </summary>
            <param name="types">The array of types to register in DI-container.</param>
            <param name="objects">The array of objects to register in DI-container (as singletons).</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="types"/> or <paramref name="objects"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">The length of <paramref name="types"/> is not equal to length of <paramref name="objects"/></exception>
        </member>
        <member name="M:xFunc.Maths.DefaultDependencyResolver.Resolve(System.Object)">
            <summary>
            Resolves the specified object.
            </summary>
            <param name="obj">The object.</param>
        </member>
        <member name="M:xFunc.Maths.DefaultDependencyResolver.Resolve``1(``0)">
            <summary>
            Resolves the specified object.
            </summary>
            <typeparam name="T">The type of specified object.</typeparam>
            <param name="obj">The object.</param>
            <returns>
            The object with injected properties.
            </returns>
        </member>
        <member name="T:xFunc.Maths.Expressions.CachedResultTypeExpression">
            <summary>
            The base class for expression with cached result type. Use this class if expression contains the complicated logic of result type calculation.
            </summary>
            <seealso cref="T:xFunc.Maths.Expressions.IExpression" />
        </member>
        <member name="F:xFunc.Maths.Expressions.CachedResultTypeExpression.m_isChanged">
            <summary>
            Indicates that expression is changed.
            </summary>
        </member>
        <member name="F:xFunc.Maths.Expressions.CachedResultTypeExpression.m_resultType">
            <summary>
            The result type.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.CachedResultTypeExpression.GetResultType">
            <summary>
            Gets the result type.
            </summary>
            <returns>The result type of current expression.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.CachedResultTypeExpression.Execute">
            <summary>
            Executes this expression. Don't use this method if your expression has variables or user-functions.
            </summary>
            <returns>
            A result of the execution.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.CachedResultTypeExpression.Execute(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.CachedResultTypeExpression.ToString(xFunc.Maths.Analyzers.Formatters.IFormatter)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="formatter">The formatter.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.CachedResultTypeExpression.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.CachedResultTypeExpression.Clone">
            <summary>
            Clones this instance of the <see cref="T:xFunc.Maths.Expressions.IExpression" />.
            </summary>
            <returns>
            Returns the new instance of <see cref="T:xFunc.Maths.Expressions.IExpression" /> that is a clone of this instance.
            </returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.CachedResultTypeExpression.Parent">
            <summary>
            Get or Set the parent expression.
            </summary>
        </member>
        <member name="P:xFunc.Maths.Expressions.CachedResultTypeExpression.MinParameters">
            <summary>
            Gets the minimum count of parameters.
            </summary>
            <value>
            The minimum count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.CachedResultTypeExpression.MaxParameters">
            <summary>
            Gets the maximum count of parameters. -1 - Infinity.
            </summary>
            <value>
            The maximum count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.CachedResultTypeExpression.ParametersCount">
            <summary>
            Gets the count of parameters.
            </summary>
            <value>
            The count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.CachedResultTypeExpression.ResultType">
            <summary>
            Gets the type of the result.
            Default: Number.
            </summary>
            <value>
            The type of the result.
            </value>
            <remarks>
            Usage of this property can affect performance. Don't use this property each time if you need to check result type of current expression. Just store/cache value only once and use it everywhere.
            </remarks>
        </member>
        <member name="P:xFunc.Maths.Expressions.CachedResultTypeExpression.IsChanged">
            <summary>
            Gets or sets a value indicating whether this instance is changed.
            </summary>
            <value>
            <c>true</c> if this instance is changed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:xFunc.Maths.Expressions.Ceil">
            <summary>
            Represents the "ceil" function.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Ceil.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Ceil" /> class.
            </summary>
            <param name="argument">The expression that represents a double-precision floating-point number to be rounded up.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Ceil.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Ceil.Execute(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Ceil.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Ceil.Clone">
            <summary>
            Clones this instance of the <see cref="T:xFunc.Maths.Expressions.IExpression" />.
            </summary>
            <returns>
            Returns the new instance of <see cref="T:xFunc.Maths.Expressions.IExpression" /> that is a clone of this instance.
            </returns>
        </member>
        <member name="T:xFunc.Maths.Expressions.ComplexNumbers.ComplexNumber">
            <summary>
            Represent complex number expression.
            </summary>
            <seealso cref="T:xFunc.Maths.Expressions.IExpression" />
        </member>
        <member name="M:xFunc.Maths.Expressions.ComplexNumbers.ComplexNumber.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.ComplexNumbers.ComplexNumber"/> class.
            </summary>
            <param name="real">The real part.</param>
            <param name="imaginary">The imaginary part.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.ComplexNumbers.ComplexNumber.#ctor(System.Numerics.Complex)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.ComplexNumbers.ComplexNumber"/> class.
            </summary>
            <param name="complex">The complex number.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.ComplexNumbers.ComplexNumber.op_Implicit(xFunc.Maths.Expressions.ComplexNumbers.ComplexNumber)~System.Numerics.Complex">
            <summary>
            Performs an implicit conversion from <see cref="T:xFunc.Maths.Expressions.ComplexNumbers.ComplexNumber"/> to <see cref="T:System.Numerics.Complex"/>.
            </summary>
            <param name="number">The number.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.ComplexNumbers.ComplexNumber.op_Implicit(System.Numerics.Complex)~xFunc.Maths.Expressions.ComplexNumbers.ComplexNumber">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Numerics.Complex"/> to <see cref="T:xFunc.Maths.Expressions.ComplexNumbers.ComplexNumber"/>.
            </summary>
            <param name="number">The number.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.ComplexNumbers.ComplexNumber.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.ComplexNumbers.ComplexNumber.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.ComplexNumbers.ComplexNumber.ToString(xFunc.Maths.Analyzers.Formatters.IFormatter)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="formatter">The formatter.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.ComplexNumbers.ComplexNumber.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.ComplexNumbers.ComplexNumber.Execute">
            <summary>
            Executes this expression. Don't use this method if your expression has variables or user-functions.
            </summary>
            <returns>
            A result of the execution.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.ComplexNumbers.ComplexNumber.Execute(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.ComplexNumbers.ComplexNumber.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.ComplexNumbers.ComplexNumber.Clone">
            <summary>
            Clones this instance of the <see cref="T:xFunc.Maths.Expressions.IExpression" />.
            </summary>
            <returns>
            Returns the new instance of <see cref="T:xFunc.Maths.Expressions.IExpression" /> that is a clone of this instance.
            </returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.ComplexNumbers.ComplexNumber.Value">
            <summary>
            Gets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.ComplexNumbers.ComplexNumber.Parent">
            <summary>
            Get or Set the parent expression.
            </summary>
        </member>
        <member name="P:xFunc.Maths.Expressions.ComplexNumbers.ComplexNumber.MinParameters">
            <summary>
            Gets the minimum count of parameters.
            </summary>
            <value>
            The minimum count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.ComplexNumbers.ComplexNumber.MaxParameters">
            <summary>
            Gets the maximum count of parameters.
            </summary>
            <value>
            The maximum count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.ComplexNumbers.ComplexNumber.ParametersCount">
            <summary>
            Gets the count of parameters.
            </summary>
            <value>
            The count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.ComplexNumbers.ComplexNumber.ResultType">
            <summary>
            Gets the type of the result.
            </summary>
            <value>
            The type of the result.
            </value>
            <remarks>
            Usage of this property can affect performance. Don't use this property each time if you need to check result type of current expression. Just store/cache value only once and use it everywhere.
            </remarks>
        </member>
        <member name="T:xFunc.Maths.Expressions.ComplexNumbers.Conjugate">
            <summary>
            Respresents the Conjugate function.
            </summary>
            <seealso cref="T:xFunc.Maths.Expressions.UnaryExpression" />
        </member>
        <member name="M:xFunc.Maths.Expressions.ComplexNumbers.Conjugate.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.ComplexNumbers.Conjugate"/> class.
            </summary>
            <param name="argument">The expression.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.ComplexNumbers.Conjugate.GetResultType">
            <summary>
            Gets the result type.
            </summary>
            <returns>
            The result type of current expression.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.ComplexNumbers.Conjugate.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.ComplexNumbers.Conjugate.Execute(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.ComplexNumbers.Conjugate.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.ComplexNumbers.Conjugate.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>
            Returns the new instance of <see cref="T:xFunc.Maths.Expressions.IExpression" /> that is a clone of this instance.
            </returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.ComplexNumbers.Conjugate.ArgumentType">
            <summary>
            Gets the type of the argument.
            </summary>
            <value>
            The type of the argument.
            </value>
        </member>
        <member name="T:xFunc.Maths.Expressions.ComplexNumbers.Im">
            <summary>
            Represent the function which returns the imaginary part of complex number.
            </summary>
            <seealso cref="T:xFunc.Maths.Expressions.UnaryExpression" />
        </member>
        <member name="M:xFunc.Maths.Expressions.ComplexNumbers.Im.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.ComplexNumbers.Im"/> class.
            </summary>
            <param name="argument">The expression.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.ComplexNumbers.Im.GetResultType">
            <summary>
            Gets the result type.
            </summary>
            <returns>
            The result type of current expression.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.ComplexNumbers.Im.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.ComplexNumbers.Im.Execute(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.ComplexNumbers.Im.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.ComplexNumbers.Im.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>Returns the new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.ComplexNumbers.Im.ArgumentType">
            <summary>
            Gets the count of parameters.
            </summary>
            <value>
            The count of parameters.
            </value>
        </member>
        <member name="T:xFunc.Maths.Expressions.ComplexNumbers.Phase">
            <summary>
            Represent the Phase function.
            </summary>
            <seealso cref="T:xFunc.Maths.Expressions.UnaryExpression" />
        </member>
        <member name="M:xFunc.Maths.Expressions.ComplexNumbers.Phase.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.ComplexNumbers.Phase"/> class.
            </summary>
            <param name="argument">The expression.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.ComplexNumbers.Phase.GetResultType">
            <summary>
            Gets the result type.
            </summary>
            <returns>
            The result type of current expression.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.ComplexNumbers.Phase.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.ComplexNumbers.Phase.Execute(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.ComplexNumbers.Phase.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.ComplexNumbers.Phase.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>Returns the new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.ComplexNumbers.Phase.ArgumentType">
            <summary>
            Gets the count of parameters.
            </summary>
            <value>
            The count of parameters.
            </value>
        </member>
        <member name="T:xFunc.Maths.Expressions.ComplexNumbers.Re">
            <summary>
            Represent the function which returns the real part of complex number.
            </summary>
            <seealso cref="T:xFunc.Maths.Expressions.UnaryExpression" />
        </member>
        <member name="M:xFunc.Maths.Expressions.ComplexNumbers.Re.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.ComplexNumbers.Re"/> class.
            </summary>
            <param name="argument">The expression.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.ComplexNumbers.Re.GetResultType">
            <summary>
            Gets the result type.
            </summary>
            <returns>
            The result type of current expression.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.ComplexNumbers.Re.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.ComplexNumbers.Re.Execute(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.ComplexNumbers.Re.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.ComplexNumbers.Re.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>Returns the new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.ComplexNumbers.Re.ArgumentType">
            <summary>
            Gets the count of parameters.
            </summary>
            <value>
            The count of parameters.
            </value>
        </member>
        <member name="T:xFunc.Maths.Expressions.ComplexNumbers.Reciprocal">
            <summary>
            Respresents the Reciprocal function.
            </summary>
            <seealso cref="T:xFunc.Maths.Expressions.UnaryExpression" />
        </member>
        <member name="M:xFunc.Maths.Expressions.ComplexNumbers.Reciprocal.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.ComplexNumbers.Reciprocal"/> class.
            </summary>
            <param name="argument">The expression.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.ComplexNumbers.Reciprocal.GetResultType">
            <summary>
            Gets the result type.
            </summary>
            <returns>
            The result type of current expression.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.ComplexNumbers.Reciprocal.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.ComplexNumbers.Reciprocal.Execute(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.ComplexNumbers.Reciprocal.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.ComplexNumbers.Reciprocal.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>
            Returns the new instance of <see cref="T:xFunc.Maths.Expressions.IExpression" /> that is a clone of this instance.
            </returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.ComplexNumbers.Reciprocal.ArgumentType">
            <summary>
            Gets the type of the argument.
            </summary>
            <value>
            The type of the argument.
            </value>
        </member>
        <member name="T:xFunc.Maths.Expressions.DelegateExpression">
            <summary>
            Represents a function in code.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.DelegateExpression.#ctor(System.Func{xFunc.Maths.Expressions.ExpressionParameters,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.DelegateExpression"/> class.
            </summary>
            <param name="func">The delegate of function.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.DelegateExpression.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.DelegateExpression.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.DelegateExpression.ToString(xFunc.Maths.Analyzers.Formatters.IFormatter)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="formatter">The formatter.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.DelegateExpression.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.DelegateExpression.Execute">
            <summary>
            Executes this expression. Don't use this method if your expression has variables or user-functions.
            </summary>
            <returns>
            A result of the execution.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.DelegateExpression.Execute(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.DelegateExpression.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.DelegateExpression.Clone">
            <summary>
            Clones this instance of the <see cref="T:xFunc.Maths.Expressions.IExpression" />.
            </summary>
            <returns>
            Returns the new instance of <see cref="T:xFunc.Maths.Expressions.IExpression" /> that is a clone of this instance.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="P:xFunc.Maths.Expressions.DelegateExpression.Parent">
            <summary>
            Get or Set the parent expression.
            </summary>
        </member>
        <member name="P:xFunc.Maths.Expressions.DelegateExpression.MinParameters">
            <summary>
            Gets the minimum count of parameters.
            </summary>
            <value>
            The minimum count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.DelegateExpression.MaxParameters">
            <summary>
            Gets the maximum count of parameters. -1 - Infinity.
            </summary>
            <value>
            The maximum count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.DelegateExpression.ParametersCount">
            <summary>
            Gets the count of parameters.
            </summary>
            <value>
            The count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.DelegateExpression.ResultType">
            <summary>
            Gets the type of the result.
            </summary>
            <value>
            The type of the result.
            </value>
            <remarks>
            Usage of this property can affect performance. Don't use this property each time if you need to check result type of current expression. Just store/cache value only once and use it everywhere.
            </remarks>
        </member>
        <member name="T:xFunc.Maths.Expressions.DifferentParametersExpression">
            <summary>
            The base class for expressions with different number of parameters.
            </summary>
        </member>
        <member name="F:xFunc.Maths.Expressions.DifferentParametersExpression.m_arguments">
            <summary>
            The arguments.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.DifferentParametersExpression.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.DifferentParametersExpression"/> class.
            </summary>
            <param name="countOfParams">The count of parameters.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.DifferentParametersExpression.#ctor(xFunc.Maths.Expressions.IExpression[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.DifferentParametersExpression" /> class.
            </summary>
            <param name="arguments">The arguments.</param>
            <param name="countOfParams">The count of parameters.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.DifferentParametersExpression.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.DifferentParametersExpression.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.DifferentParametersExpression.GetHashCode(System.Int32,System.Int32)">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <param name="first">The first.</param>
            <param name="second">The second.</param>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.DifferentParametersExpression.ToString(xFunc.Maths.Analyzers.Formatters.IFormatter)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="formatter">The formatter.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.DifferentParametersExpression.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.DifferentParametersExpression.Execute">
            <summary>
            Executes this expression. Don't use this method if your expression has variables or user-functions.
            </summary>
            <returns>
            A result of the execution.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.DifferentParametersExpression.Execute(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.DifferentParametersExpression.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.DifferentParametersExpression.Clone">
            <summary>
            Clones this instance of the <see cref="T:xFunc.Maths.Expressions.IExpression" />.
            </summary>
            <returns>
            Returns the new instance of <see cref="T:xFunc.Maths.Expressions.IExpression" /> that is a clone of this instance.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.DifferentParametersExpression.CloneArguments">
            <summary>
            Closes the arguments.
            </summary>
            <returns>The new array of <see cref="T:xFunc.Maths.Expressions.IExpression"/>.</returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.DifferentParametersExpression.Parent">
            <summary>
            Get or Set the parent expression.
            </summary>
        </member>
        <member name="P:xFunc.Maths.Expressions.DifferentParametersExpression.Arguments">
            <summary>
            Gets or sets the arguments.
            </summary>
            <value>The arguments.</value>
        </member>
        <member name="P:xFunc.Maths.Expressions.DifferentParametersExpression.ArgumentsTypes">
            <summary>
            Gets the arguments types.
            </summary>
            <value>
            The arguments types.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.DifferentParametersExpression.MinParameters">
            <summary>
            Gets the minimum count of parameters.
            </summary>
            <value>
            The minimum count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.DifferentParametersExpression.MaxParameters">
            <summary>
            Gets the maximum count of parameters. -1 - Infinity.
            </summary>
            <value>
            The maximum count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.DifferentParametersExpression.ParametersCount">
            <summary>
            Gets or Sets the count of parameters.
            </summary>
            <value>
            The count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.DifferentParametersExpression.ResultType">
            <summary>
            Gets the type of the result.
            </summary>
            <value>
            The type of the result.
            </value>
            <remarks>
            Usage of this property can affect performance. Don't use this property each time if you need to check result type of current expression. Just store/cache value only once and use it everywhere.
            </remarks>
        </member>
        <member name="T:xFunc.Maths.Expressions.ExpressionParameters">
            <summary>
            Combines all parameters of expressions.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.ExpressionParameters.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.ExpressionParameters"/> class.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.ExpressionParameters.#ctor(xFunc.Maths.Expressions.AngleMeasurement)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.ExpressionParameters"/> class.
            </summary>
            <param name="angleMeasuremnt">The angle measuremnt.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.ExpressionParameters.#ctor(xFunc.Maths.Expressions.Collections.ParameterCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.ExpressionParameters"/> class.
            </summary>
            <param name="parameters">The collection of variables' values.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.ExpressionParameters.#ctor(xFunc.Maths.Expressions.Collections.FunctionCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.ExpressionParameters"/> class.
            </summary>
            <param name="functions">The collection of user functions.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.ExpressionParameters.#ctor(xFunc.Maths.Expressions.AngleMeasurement,xFunc.Maths.Expressions.Collections.ParameterCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.ExpressionParameters"/> class.
            </summary>
            <param name="angleMeasuremnt">The angle measuremnt.</param>
            <param name="variables">The collection of variables' values.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.ExpressionParameters.#ctor(xFunc.Maths.Expressions.AngleMeasurement,xFunc.Maths.Expressions.Collections.FunctionCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.ExpressionParameters"/> class.
            </summary>
            <param name="angleMeasuremnt">The angle measuremnt.</param>
            <param name="functions">The collection of user functions.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.ExpressionParameters.#ctor(xFunc.Maths.Expressions.Collections.ParameterCollection,xFunc.Maths.Expressions.Collections.FunctionCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.ExpressionParameters"/> class.
            </summary>
            <param name="variables">The collection of variables' values.</param>
            <param name="functions">The collection of user functions.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.ExpressionParameters.#ctor(xFunc.Maths.Expressions.AngleMeasurement,xFunc.Maths.Expressions.Collections.ParameterCollection,xFunc.Maths.Expressions.Collections.FunctionCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.ExpressionParameters"/> class.
            </summary>
            <param name="angleMeasuremnt">The angle measuremnt.</param>
            <param name="variables">The collection of variables' values.</param>
            <param name="functions">The collection of user functions.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.ExpressionParameters.op_Implicit(xFunc.Maths.Expressions.AngleMeasurement)~xFunc.Maths.Expressions.ExpressionParameters">
            <summary>
            Creates a <see cref="T:xFunc.Maths.Expressions.ExpressionParameters"/> from the specified <see cref="P:xFunc.Maths.Expressions.ExpressionParameters.AngleMeasurement"/>.
            </summary>
            <param name="angleMeasurement">The angle measurement.</param>
            <returns>The created <see cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.ExpressionParameters.op_Implicit(xFunc.Maths.Expressions.Collections.ParameterCollection)~xFunc.Maths.Expressions.ExpressionParameters">
            <summary>
            Creates a <see cref="T:xFunc.Maths.Expressions.ExpressionParameters"/> from the specified <see cref="T:xFunc.Maths.Expressions.Collections.ParameterCollection"/>.
            </summary>
            <param name="parameters">The collection of variables' values.</param>
            <returns>The created <see cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.ExpressionParameters.op_Implicit(xFunc.Maths.Expressions.Collections.FunctionCollection)~xFunc.Maths.Expressions.ExpressionParameters">
            <summary>
            Creates a <see cref="T:xFunc.Maths.Expressions.ExpressionParameters"/> from the specified <see cref="T:xFunc.Maths.Expressions.Collections.FunctionCollection"/>.
            </summary>
            <param name="functions">The collection of user functions.</param>
            <returns>The created <see cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>.</returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.ExpressionParameters.AngleMeasurement">
            <summary>
            Gets or sets the angle measurement.
            </summary>
            <value>
            The angle measurement.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.ExpressionParameters.Variables">
            <summary>
            Gets the collection of variables' values.
            </summary>
            <value>
            The collection of variables' values.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.ExpressionParameters.Functions">
            <summary>
            Gets the collection of user functions.
            </summary>
            <value>
            The collection of user functions.
            </value>
        </member>
        <member name="T:xFunc.Maths.Expressions.ExpressionResultType">
            <summary>
            Represents results of expressions.
            </summary>
        </member>
        <member name="F:xFunc.Maths.Expressions.ExpressionResultType.None">
            <summary>
            The expression doesn't return anything.
            </summary>
        </member>
        <member name="F:xFunc.Maths.Expressions.ExpressionResultType.Undefined">
            <summary>
            The expression returns undefined result.
            </summary>
        </member>
        <member name="F:xFunc.Maths.Expressions.ExpressionResultType.Number">
            <summary>
            The expression returns a number.
            </summary>
        </member>
        <member name="F:xFunc.Maths.Expressions.ExpressionResultType.ComplexNumber">
            <summary>
            The expression returns a complex number.
            </summary>
        </member>
        <member name="F:xFunc.Maths.Expressions.ExpressionResultType.Boolean">
            <summary>
            The expression returns a boolean (true or false).
            </summary>
        </member>
        <member name="F:xFunc.Maths.Expressions.ExpressionResultType.Vector">
            <summary>
            The expression returns a vector.
            </summary>
        </member>
        <member name="F:xFunc.Maths.Expressions.ExpressionResultType.Matrix">
            <summary>
            The expression returns a matrix.
            </summary>
        </member>
        <member name="F:xFunc.Maths.Expressions.ExpressionResultType.Expression">
            <summary>
            The expression returns other expression.
            </summary>
        </member>
        <member name="F:xFunc.Maths.Expressions.ExpressionResultType.All">
            <summary>
            Combines other parameters.
            </summary>
        </member>
        <member name="T:xFunc.Maths.Expressions.ExpressionResultTypeExtension">
            <summary>
            Extension for the <see cref="T:xFunc.Maths.Expressions.ExpressionResultType"/> enumeration.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.ExpressionResultTypeExtension.HasFlagNI(xFunc.Maths.Expressions.ExpressionResultType,xFunc.Maths.Expressions.ExpressionResultType)">
            <summary>
            Determines whether one or more bit fields are set in the current instance (faster than default implementation).
            </summary>
            <param name="type">An enumeration.</param>
            <param name="flag">An enumeration value.</param>
            <returns><c>true</c> if the bit field or bit fields that are set in flag are also set in the current instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:xFunc.Maths.Expressions.Fact">
            <summary>
            Represents the Factorial function.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Fact.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Fact"/> class.
            </summary>
            <param name="argument">The expression.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Fact.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Fact.Execute(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Fact.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Fact.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>
            Returns the new instance of <see cref="T:xFunc.Maths.Expressions.IExpression" /> that is a clone of this instance.
            </returns>
        </member>
        <member name="T:xFunc.Maths.Expressions.Floor">
            <summary>
            Represents the "floor" function.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Floor.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Floor"/> class.
            </summary>
            <param name="argument">The expression that represents a double-precision floating-point number to be rounded down.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Floor.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Floor.Execute(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Floor.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Floor.Clone">
            <summary>
            Clones this instance of the <see cref="T:xFunc.Maths.Expressions.IExpression" />.
            </summary>
            <returns>
            Returns the new instance of <see cref="T:xFunc.Maths.Expressions.IExpression" /> that is a clone of this instance.
            </returns>
        </member>
        <member name="T:xFunc.Maths.Expressions.GCD">
            <summary>
            Represents a greatest common divisor.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.GCD.#ctor(xFunc.Maths.Expressions.IExpression[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.GCD"/> class.
            </summary>
            <param name="args">The arguments.</param>
            <param name="countOfParams">The count of parameters.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="args"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The length of <paramref name="args"/> is not equal to <paramref name="countOfParams"/>.</exception>
        </member>
        <member name="M:xFunc.Maths.Expressions.GCD.#ctor(xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.GCD"/> class.
            </summary>
            <param name="firstMathExpression">The first operand.</param>
            <param name="secondMathExpression">The second operand.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.GCD.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.GCD.Execute(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.GCD.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.GCD.Clone">
            <summary>
            Clones this instance of the <see cref="T:xFunc.Maths.Expressions.GCD"/>.
            </summary>
            <returns>Returns the new instance of <see cref="T:xFunc.Maths.Expressions.GCD"/> that is a clone of this instance.</returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.GCD.MinParameters">
            <summary>
            Gets the minimum count of parameters.
            </summary>
            <value>
            The minimum count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.GCD.MaxParameters">
            <summary>
            Gets the maximum count of parameters. -1 - Infinity.
            </summary>
            <value>
            The maximum count of parameters.
            </value>
        </member>
        <member name="T:xFunc.Maths.Expressions.Hyperbolic.HyperbolicExpression">
            <summary>
            The base class for hyperbolic functions.
            </summary>
            <seealso cref="T:xFunc.Maths.Expressions.UnaryExpression" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.HyperbolicExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Hyperbolic.HyperbolicExpression"/> class.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.HyperbolicExpression.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Hyperbolic.HyperbolicExpression" /> class.
            </summary>
            <param name="argument">The expression.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.HyperbolicExpression.GetResultType">
            <summary>
            Gets the result type.
            </summary>
            <returns>
            The result type of current expression.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.HyperbolicExpression.ExecuteComplex(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.HyperbolicExpression.ExecuteNumber(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.HyperbolicExpression.Execute(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="P:xFunc.Maths.Expressions.Hyperbolic.HyperbolicExpression.ArgumentType">
            <summary>
            Gets the type of the argument.
            </summary>
            <value>
            The type of the argument.
            </value>
        </member>
        <member name="T:xFunc.Maths.Expressions.Hyperbolic.Arcsch">
            <summary>
            Represents the Arcsch function.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Arcsch.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Hyperbolic.Arcsch"/> class.
            </summary>
            <param name="expression">The argument of function.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Arcsch.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Arcsch.ExecuteComplex(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Arcsch.ExecuteNumber(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Arcsch.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Arcsch.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>The new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="T:xFunc.Maths.Expressions.Hyperbolic.Arsech">
            <summary>
            Represents the Arsech function.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Arsech.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Hyperbolic.Arsech"/> class.
            </summary>
            <param name="expression">The argument of function.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Arsech.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Arsech.ExecuteComplex(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Arsech.ExecuteNumber(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Arsech.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Arsech.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>The new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="T:xFunc.Maths.Expressions.Hyperbolic.Arcoth">
            <summary>
            Represents the Arcoth function.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Arcoth.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Hyperbolic.Arcoth"/> class.
            </summary>
            <param name="expression">The argument of function.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Arcoth.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Arcoth.ExecuteComplex(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Arcoth.ExecuteNumber(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Arcoth.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Arcoth.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>The new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="T:xFunc.Maths.Expressions.Hyperbolic.Artanh">
            <summary>
            Represents the Artanh function.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Artanh.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Hyperbolic.Artanh"/> class.
            </summary>
            <param name="expression">The argument of function.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Artanh.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Artanh.ExecuteComplex(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Artanh.ExecuteNumber(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Artanh.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Artanh.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>The new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="T:xFunc.Maths.Expressions.Hyperbolic.Arcosh">
            <summary>
            Represents the Arcosh function.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Arcosh.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Hyperbolic.Arcosh"/> class.
            </summary>
            <param name="expression">The argument of function.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Arcosh.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Arcosh.ExecuteComplex(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Arcosh.ExecuteNumber(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Arcosh.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Arcosh.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>The new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="T:xFunc.Maths.Expressions.Hyperbolic.Arsinh">
            <summary>
            Represents the Arsinh function.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Arsinh.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Hyperbolic.Arsinh"/> class.
            </summary>
            <param name="expression">The argument of function.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Arsinh.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Arsinh.ExecuteComplex(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Arsinh.ExecuteNumber(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Arsinh.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Arsinh.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>The new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="T:xFunc.Maths.Expressions.Hyperbolic.Csch">
            <summary>
            Represents the Hyperbolic cosecant function.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Csch.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Hyperbolic.Csch"/> class.
            </summary>
            <param name="expression">The argument of function.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Csch.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Csch.ExecuteComplex(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Csch.ExecuteNumber(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Csch.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Csch.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>The new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="T:xFunc.Maths.Expressions.Hyperbolic.Cosh">
            <summary>
            Represents the Hyperbolic cosine function.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Cosh.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Hyperbolic.Cosh"/> class.
            </summary>
            <param name="expression">The argument of function.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Cosh.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Cosh.ExecuteComplex(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Cosh.ExecuteNumber(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Cosh.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Cosh.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>The new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="T:xFunc.Maths.Expressions.Hyperbolic.Coth">
            <summary>
            Represents the Hyperbolic cotangent function.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Coth.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Hyperbolic.Coth"/> class.
            </summary>
            <param name="expression">The argument of function.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Coth.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Coth.ExecuteComplex(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Coth.ExecuteNumber(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Coth.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Coth.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>The new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="T:xFunc.Maths.Expressions.Hyperbolic.Sech">
            <summary>
            Represents the Hyperbolic secant function.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Sech.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Hyperbolic.Sech"/> class.
            </summary>
            <param name="expression">The argument of function.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Sech.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Sech.ExecuteComplex(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Sech.ExecuteNumber(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Sech.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Sech.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>The new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="T:xFunc.Maths.Expressions.Hyperbolic.Sinh">
            <summary>
            Represents the Hyperbolic sine function.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Sinh.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Hyperbolic.Sinh"/> class.
            </summary>
            <param name="expression">The argument of function.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Sinh.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Sinh.ExecuteComplex(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Sinh.ExecuteNumber(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Sinh.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Sinh.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>The new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="T:xFunc.Maths.Expressions.Hyperbolic.Tanh">
            <summary>
            Represents the Hyperbolic tangent function.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Tanh.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Hyperbolic.Tanh"/> class.
            </summary>
            <param name="expression">The argument of function.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Tanh.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Tanh.ExecuteComplex(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Tanh.ExecuteNumber(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Tanh.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Hyperbolic.Tanh.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>The new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="T:xFunc.Maths.Expressions.IChangedExpession">
            <summary>
            The base interface for cached expression.
            </summary>
        </member>
        <member name="P:xFunc.Maths.Expressions.IChangedExpession.IsChanged">
            <summary>
            Gets or sets a value indicating whether this instance is changed.
            </summary>
            <value>
            <c>true</c> if this instance is changed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:xFunc.Maths.Expressions.LCM">
            <summary>
            Represents a least common multiple.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.LCM.#ctor(xFunc.Maths.Expressions.IExpression[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.LCM"/> class.
            </summary>
            <param name="args">The arguments.</param>
            <param name="countOfParams">The count of parameters.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="args"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The length of <paramref name="args"/> is not equal to <paramref name="countOfParams"/>.</exception>
        </member>
        <member name="M:xFunc.Maths.Expressions.LCM.#ctor(xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.LCM"/> class.
            </summary>
            <param name="firstMathExpression">The first operand.</param>
            <param name="secondMathExpression">The second operand.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.LCM.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.LCM.Execute(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.LCM.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.LCM.Clone">
            <summary>
            Clones this instance of the <see cref="T:xFunc.Maths.Expressions.LCM"/>.
            </summary>
            <returns>Returns the new instance of <see cref="T:xFunc.Maths.Expressions.LCM"/> that is a clone of this instance.</returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.LCM.MinParameters">
            <summary>
            Gets the minimum count of parameters.
            </summary>
            <value>
            The minimum count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.LCM.MaxParameters">
            <summary>
            Gets the maximum count of parameters. -1 - Infinity.
            </summary>
            <value>
            The maximum count of parameters.
            </value>
        </member>
        <member name="T:xFunc.Maths.Expressions.Collections.FunctionCollection">
            <summary>
            Strongly typed dictionaty that contains user-defined functions.
            </summary>
        </member>
        <member name="E:xFunc.Maths.Expressions.Collections.FunctionCollection.CollectionChanged">
            <summary>
            Occurs when the collection changes.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Collections.FunctionCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Collections.FunctionCollection"/> class.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Collections.FunctionCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Collections.FunctionCollection"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="P:xFunc.Maths.Expressions.Collections.FunctionCollection.Item(xFunc.Maths.Expressions.UserFunction)">
            <summary>
            Gets or sets the <see cref="T:xFunc.Maths.Expressions.IExpression"/> with the specified key.
            </summary>
            <value>
            The <see cref="T:xFunc.Maths.Expressions.IExpression"/>.
            </value>
            <param name="key">The key.</param>
            <returns>The saved user function.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Collections.FunctionCollection.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises the <see cref="E:CollectionChanged" /> event.
            </summary>
            <param name="args">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Collections.FunctionCollection.Add(xFunc.Maths.Expressions.UserFunction,xFunc.Maths.Expressions.IExpression)">
            <summary>
            Adds new function.
            </summary>
            <param name="key">The signature of function.</param>
            <param name="value">The function.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Collections.FunctionCollection.Remove(xFunc.Maths.Expressions.UserFunction)">
            <summary>
            Removes the specified key.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Collections.FunctionCollection.GetKeyByKey(xFunc.Maths.Expressions.UserFunction)">
            <summary>
            Gets an user function.
            </summary>
            <param name="function">The function.</param>
            <returns>An user function</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The exception that is thrown when the key specified for accessing an element in a collection does not match any key in the collection.</exception>
        </member>
        <member name="T:xFunc.Maths.Expressions.Collections.Parameter">
            <summary>
            Item of <see cref="T:xFunc.Maths.Expressions.Collections.ParameterCollection"/>.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Collections.Parameter.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Collections.Parameter"/> class.
            </summary>
            <param name="key">The name of parameter.</param>
            <param name="value">The value of parameter.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Collections.Parameter.#ctor(System.String,System.Int32,xFunc.Maths.Expressions.Collections.ParameterType)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Collections.Parameter" /> class.
            </summary>
            <param name="key">The name of parameter.</param>
            <param name="value">The value of parameter.</param>
            <param name="type">The type of parameter.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Collections.Parameter.#ctor(System.String,System.Double,xFunc.Maths.Expressions.Collections.ParameterType)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Collections.Parameter" /> class.
            </summary>
            <param name="key">The name of parameter.</param>
            <param name="value">The value of parameter.</param>
            <param name="type">The type of parameter.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Collections.Parameter.#ctor(System.String,System.Object,xFunc.Maths.Expressions.Collections.ParameterType)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Collections.Parameter" /> class.
            </summary>
            <param name="key">The name of parameter.</param>
            <param name="value">The value of parameter.</param>
            <param name="type">The type of parameter.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Collections.Parameter.CreateConstant(System.String,System.Object)">
            <summary>
            Creates a constant.
            </summary>
            <param name="key">The name of parameter.</param>
            <param name="value">The value of parameter.</param>
            <returns>A constant.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Collections.Parameter.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Collections.Parameter.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Collections.Parameter.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Collections.Parameter.CompareTo(xFunc.Maths.Expressions.Collections.Parameter)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>A value that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the other parameter.Zero This object is equal to other. Greater than zero This object is greater than other.</returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.Collections.Parameter.Key">
            <summary>
            Gets the name of parameter.
            </summary>
            <value>
            The name of parameter.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Collections.Parameter.Value">
            <summary>
            Gets or sets the value of parameter.
            </summary>
            <value>
            The value of parameter.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Collections.Parameter.Type">
            <summary>
            Gets or sets the type of parameter.
            </summary>
            <value>
            The type of parameter.
            </value>
        </member>
        <member name="T:xFunc.Maths.Expressions.Collections.ParameterCollection">
            <summary>
            Strongly typed dictionaty that contains value of variables.
            </summary>
        </member>
        <member name="E:xFunc.Maths.Expressions.Collections.ParameterCollection.CollectionChanged">
            <summary>
            Occurs when the collection changes.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Collections.ParameterCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Collections.ParameterCollection"/> class.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Collections.ParameterCollection.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Collections.ParameterCollection" /> class.
            </summary>
            <param name="initConsts">if set to <c>true</c> initialize constants.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Collections.ParameterCollection.#ctor(System.Collections.Generic.IEnumerable{xFunc.Maths.Expressions.Collections.Parameter})">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Collections.ParameterCollection"/> class.
            </summary>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Collections.ParameterCollection.#ctor(System.Collections.Generic.IEnumerable{xFunc.Maths.Expressions.Collections.Parameter},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Collections.ParameterCollection" /> class.
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="initConsts">if set to <c>true</c> initialize constants.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Collections.ParameterCollection.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises the <see cref="E:CollectionChanged" /> event.
            </summary>
            <param name="args">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Collections.ParameterCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Collections.ParameterCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.Collections.ParameterCollection.Item(System.Int32)">
            <summary>
            Gets or sets the value of variable.
            </summary>
            <value>
            The value of parameter.
            </value>
            <param name="index">The index of variable.</param>
            <returns>The value of variable.</returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.Collections.ParameterCollection.Item(System.String)">
            <summary>
            Gets or sets the value of variable.
            </summary>
            <value>
            The value of parameter.
            </value>
            <param name="key">The name of variable.</param>
            <returns>The value of variable.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Collections.ParameterCollection.Add(xFunc.Maths.Expressions.Collections.Parameter)">
            <summary>
            Adds the specified element to a set.
            </summary>
            <param name="param">The element.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="param"/> is null.</exception>
            <exception cref="T:xFunc.Maths.Expressions.Collections.ParameterIsReadOnlyException">The variable is read only.</exception>
        </member>
        <member name="M:xFunc.Maths.Expressions.Collections.ParameterCollection.Add(System.String)">
            <summary>
            Adds the specified element to a set.
            </summary>
            <param name="key">The name of variable.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Collections.ParameterCollection.Add(System.String,System.Object)">
            <summary>
            Adds the specified element to a set.
            </summary>
            <param name="key">The name of variable.</param>
            <param name="value">The value of variable.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Collections.ParameterCollection.Remove(xFunc.Maths.Expressions.Collections.Parameter)">
            <summary>
            Removes the specified element from this object.
            </summary>
            <param name="param">The element.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="param"/> is null.</exception>
            <exception cref="T:xFunc.Maths.Expressions.Collections.ParameterIsReadOnlyException">The variable is read only.</exception>
        </member>
        <member name="M:xFunc.Maths.Expressions.Collections.ParameterCollection.Remove(System.String)">
            <summary>
            Removes the specified element from this object.
            </summary>
            <param name="key">The name of variable.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key" /> is null.</exception>
            <exception cref="T:xFunc.Maths.Expressions.Collections.ParameterIsReadOnlyException">The variable is read only.</exception>
        </member>
        <member name="M:xFunc.Maths.Expressions.Collections.ParameterCollection.Clear">
            <summary>
            Clears this collection.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Collections.ParameterCollection.Contains(xFunc.Maths.Expressions.Collections.Parameter)">
            <summary>
            Determines whether an onject contains the specified element.
            </summary>
            <param name="param">The element.</param>
            <returns><c>true</c> if the object contains the specified element; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Collections.ParameterCollection.ContainsInConstants(xFunc.Maths.Expressions.Collections.Parameter)">
            <summary>
            Determines whether an onject contains the specified element.
            </summary>
            <param name="param">The element.</param>
            <returns><c>true</c> if the object contains the specified element; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Collections.ParameterCollection.ContainsKey(System.String)">
            <summary>
            Determines whether an onject contains the specified key.
            </summary>
            <param name="key">The name of variable.</param>
            <returns><c>true</c> if the object contains the specified key; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Collections.ParameterCollection.ContainsKeyInConstants(System.String)">
            <summary>
            Determines whether an onject contains the specified key.
            </summary>
            <param name="key">The name of variable.</param>
            <returns><c>true</c> if the object contains the specified key; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.Collections.ParameterCollection.Constants">
            <summary>
            Gets the constants.
            </summary>
            <value>
            The constants.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Collections.ParameterCollection.Collection">
            <summary>
            Gets the collection of variables.
            </summary>
            <value>
            The collection.
            </value>
        </member>
        <member name="T:xFunc.Maths.Expressions.Collections.ParameterIsReadOnlyException">
            <summary>
            Trying to change a read-only variable.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Collections.ParameterIsReadOnlyException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Collections.ParameterIsReadOnlyException"/> class.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Collections.ParameterIsReadOnlyException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Collections.ParameterIsReadOnlyException" /> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Collections.ParameterIsReadOnlyException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Collections.ParameterIsReadOnlyException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Collections.ParameterIsReadOnlyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Collections.ParameterIsReadOnlyException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:xFunc.Maths.Expressions.Collections.ParameterType">
            <summary>
            Contains types of parameter.
            </summary>
        </member>
        <member name="F:xFunc.Maths.Expressions.Collections.ParameterType.Normal">
            <summary>
            Normal.
            </summary>
        </member>
        <member name="F:xFunc.Maths.Expressions.Collections.ParameterType.ReadOnly">
            <summary>
            Read only.
            </summary>
        </member>
        <member name="F:xFunc.Maths.Expressions.Collections.ParameterType.Constant">
            <summary>
            Constant.
            </summary>
        </member>
        <member name="T:xFunc.Maths.Expressions.Lb">
            <summary>
            Represents the binary logarithm function.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Lb.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Lb"/> class.
            </summary>
            <param name="expression">The argument of function.</param>
            <seealso cref="T:xFunc.Maths.Expressions.IExpression"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Lb.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Lb.Execute(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this Ln expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Lb.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Lb.Clone">
            <summary>
            Clones this instance of the <see cref="T:xFunc.Maths.Expressions.Lb"/>.
            </summary>
            <returns>Returns the new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="T:xFunc.Maths.Expressions.LogicalAndBitwise.Bool">
            <summary>
            Represents the boolean constant.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.LogicalAndBitwise.Bool.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.LogicalAndBitwise.Bool"/> class.
            </summary>
            <param name="value">The value of this constant.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.LogicalAndBitwise.Bool.Execute">
            <summary>
            Executes this expression.
            </summary>
            <returns>
            A result of the execution.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.LogicalAndBitwise.Bool.Execute(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.LogicalAndBitwise.Bool.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.LogicalAndBitwise.Bool.op_Implicit(xFunc.Maths.Expressions.LogicalAndBitwise.Bool)~System.Boolean">
            <summary>
            Performs an implicit conversion from <see cref="T:xFunc.Maths.Expressions.LogicalAndBitwise.Bool"/> to <see cref="T:System.Boolean"/>.
            </summary>
            <param name="boolean">The boolean.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.LogicalAndBitwise.Bool.op_Implicit(System.Boolean)~xFunc.Maths.Expressions.LogicalAndBitwise.Bool">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Boolean"/> to <see cref="T:xFunc.Maths.Expressions.LogicalAndBitwise.Bool"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.LogicalAndBitwise.Bool.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.LogicalAndBitwise.Bool.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.LogicalAndBitwise.Bool.ToString(xFunc.Maths.Analyzers.Formatters.IFormatter)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="formatter">The formatter.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.LogicalAndBitwise.Bool.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.LogicalAndBitwise.Bool.Clone">
            <summary>
            Clones this instance of the <see cref="T:xFunc.Maths.Expressions.IExpression" />.
            </summary>
            <returns>
            Returns the new instance of <see cref="T:xFunc.Maths.Expressions.IExpression" /> that is a clone of this instance.
            </returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.LogicalAndBitwise.Bool.Parent">
            <summary>
            Get or Set the parent expression.
            </summary>
        </member>
        <member name="P:xFunc.Maths.Expressions.LogicalAndBitwise.Bool.MinParameters">
            <summary>
            Gets the minimum count of parameters.
            </summary>
            <value>
            The minimum count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.LogicalAndBitwise.Bool.MaxParameters">
            <summary>
            Gets the maximum count of parameters. -1 - Infinity.
            </summary>
            <value>
            The maximum count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.LogicalAndBitwise.Bool.ParametersCount">
            <summary>
            Gets the count of parameters.
            </summary>
            <value>
            The count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.LogicalAndBitwise.Bool.ResultType">
            <summary>
            Gets the type of the result.
            </summary>
            <value>
            The type of the result.
            </value>
            <remarks>
            Usage of this property can affect performance. Don't use this property each time if you need to check result type of current expression. Just store/cache value only once and use it everywhere.
            </remarks>
        </member>
        <member name="P:xFunc.Maths.Expressions.LogicalAndBitwise.Bool.Value">
            <summary>
            Gets the value of this expression.
            </summary>
            <value>
            The value of this expression.
            </value>
        </member>
        <member name="T:xFunc.Maths.Expressions.LogicalAndBitwise.Equality">
            <summary>
            Represents the Equality operation.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.LogicalAndBitwise.Equality.#ctor(xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.LogicalAndBitwise.Equality"/> class.
            </summary>
            <param name="left">The left (first) operand.</param>
            <param name="right">The right (second) operand.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.LogicalAndBitwise.Equality.GetResultType">
            <summary>
            Gets the result type.
            </summary>
            <returns>
            The result type of current expression.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.LogicalAndBitwise.Equality.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.LogicalAndBitwise.Equality.Execute(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.LogicalAndBitwise.Equality.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.LogicalAndBitwise.Equality.Clone">
            <summary>
            Creates the clone of this instance.
            </summary>
            <returns>
            Returns the new instance of <see cref="T:xFunc.Maths.Expressions.IExpression" /> that is a clone of this instance.
            </returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.LogicalAndBitwise.Equality.LeftType">
            <summary>
            Gets the type of the left parameter.
            </summary>
            <value>
            The type of the left parameter.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.LogicalAndBitwise.Equality.RightType">
            <summary>
            Gets the type of the right parameter.
            </summary>
            <value>
            The type of the right parameter.
            </value>
        </member>
        <member name="T:xFunc.Maths.Expressions.LogicalAndBitwise.Implication">
            <summary>
            Represents a Implication operation.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.LogicalAndBitwise.Implication.#ctor(xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.LogicalAndBitwise.Implication"/> class.
            </summary>
            <param name="left">The left (first) operand.</param>
            <param name="right">The right (second) operand.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.LogicalAndBitwise.Implication.GetResultType">
            <summary>
            Gets the result type.
            </summary>
            <returns>
            The result type of current expression.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.LogicalAndBitwise.Implication.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.LogicalAndBitwise.Implication.Execute(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this Implication expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.LogicalAndBitwise.Implication.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.LogicalAndBitwise.Implication.Clone">
            <summary>
            Clones this instance of the <see cref="T:xFunc.Maths.Expressions.LogicalAndBitwise.Implication"/>.
            </summary>
            <returns>Returns the new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.LogicalAndBitwise.Implication.LeftType">
            <summary>
            Gets the type of the left parameter.
            </summary>
            <value>
            The type of the left parameter.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.LogicalAndBitwise.Implication.RightType">
            <summary>
            Gets the type of the right parameter.
            </summary>
            <value>
            The type of the right parameter.
            </value>
        </member>
        <member name="T:xFunc.Maths.Expressions.LogicalAndBitwise.NAnd">
            <summary>
            Represents a bitwise NAND operation.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.LogicalAndBitwise.NAnd.#ctor(xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.LogicalAndBitwise.NAnd"/> class.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <seealso cref="T:xFunc.Maths.Expressions.IExpression"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.LogicalAndBitwise.NAnd.GetResultType">
            <summary>
            Gets the result type.
            </summary>
            <returns>
            The result type of current expression.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.LogicalAndBitwise.NAnd.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.LogicalAndBitwise.NAnd.Execute(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this NAND expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.LogicalAndBitwise.NAnd.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.LogicalAndBitwise.NAnd.Clone">
            <summary>
            Clones this instance of the <see cref="T:xFunc.Maths.Expressions.LogicalAndBitwise.NAnd"/>.
            </summary>
            <returns>Returns the new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.LogicalAndBitwise.NAnd.LeftType">
            <summary>
            Gets the type of the left parameter.
            </summary>
            <value>
            The type of the left parameter.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.LogicalAndBitwise.NAnd.RightType">
            <summary>
            Gets the type of the right parameter.
            </summary>
            <value>
            The type of the right parameter.
            </value>
        </member>
        <member name="T:xFunc.Maths.Expressions.LogicalAndBitwise.NOr">
            <summary>
            Represents a NOR operation.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.LogicalAndBitwise.NOr.#ctor(xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.LogicalAndBitwise.NOr"/> class.
            </summary>
            <param name="left">The left (first) operand.</param>
            <param name="right">The right (second) operand.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.LogicalAndBitwise.NOr.GetResultType">
            <summary>
            Gets the result type.
            </summary>
            <returns>
            The result type of current expression.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.LogicalAndBitwise.NOr.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.LogicalAndBitwise.NOr.Execute(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this NOR expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.LogicalAndBitwise.NOr.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.LogicalAndBitwise.NOr.Clone">
            <summary>
            Clones this instance of the <see cref="T:xFunc.Maths.Expressions.LogicalAndBitwise.NOr"/>.
            </summary>
            <returns>Returns the new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.LogicalAndBitwise.NOr.LeftType">
            <summary>
            Gets the type of the left parameter.
            </summary>
            <value>
            The type of the left parameter.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.LogicalAndBitwise.NOr.RightType">
            <summary>
            Gets the type of the right parameter.
            </summary>
            <value>
            The type of the right parameter.
            </value>
        </member>
        <member name="T:xFunc.Maths.Expressions.LogicalAndBitwise.And">
            <summary>
            Represents a AND operation.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.LogicalAndBitwise.And.#ctor(xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.LogicalAndBitwise.And"/> class.
            </summary>
            <param name="left">The left (first) operand.</param>
            <param name="right">The right (second) operand.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.LogicalAndBitwise.And.GetResultType">
            <summary>
            Gets the result type.
            </summary>
            <returns>
            The result type of current expression.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.LogicalAndBitwise.And.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.LogicalAndBitwise.And.Execute(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this AND expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.LogicalAndBitwise.And.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.LogicalAndBitwise.And.Clone">
            <summary>
            Clones this instance of the <see cref="T:xFunc.Maths.Expressions.LogicalAndBitwise.And"/>.
            </summary>
            <returns>Returns the new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.LogicalAndBitwise.And.LeftType">
            <summary>
            Gets the type of the left parameter.
            </summary>
            <value>
            The type of the left parameter.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.LogicalAndBitwise.And.RightType">
            <summary>
            Gets the type of the right parameter.
            </summary>
            <value>
            The type of the right parameter.
            </value>
        </member>
        <member name="T:xFunc.Maths.Expressions.LogicalAndBitwise.XOr">
            <summary>
            Represents a bitwise XOR operation.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.LogicalAndBitwise.XOr.#ctor(xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.LogicalAndBitwise.XOr"/> class.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <seealso cref="T:xFunc.Maths.Expressions.IExpression"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.LogicalAndBitwise.XOr.GetResultType">
            <summary>
            Gets the result type.
            </summary>
            <returns>
            The result type of current expression.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.LogicalAndBitwise.XOr.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.LogicalAndBitwise.XOr.Execute(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this bitwise XOR expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.LogicalAndBitwise.XOr.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.LogicalAndBitwise.XOr.Clone">
            <summary>
            Clones this instance of the <see cref="T:xFunc.Maths.Expressions.LogicalAndBitwise.XOr"/>.
            </summary>
            <returns>Returns the new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.LogicalAndBitwise.XOr.LeftType">
            <summary>
            Gets the type of the left parameter.
            </summary>
            <value>
            The type of the left parameter.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.LogicalAndBitwise.XOr.RightType">
            <summary>
            Gets the type of the right parameter.
            </summary>
            <value>
            The type of the right parameter.
            </value>
        </member>
        <member name="T:xFunc.Maths.Expressions.LogicalAndBitwise.Or">
            <summary>
            Represents a OR operation.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.LogicalAndBitwise.Or.#ctor(xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.LogicalAndBitwise.Or"/> class.
            </summary>
            <param name="left">The left (first) operand.</param>
            <param name="right">The right (second) operand.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.LogicalAndBitwise.Or.GetResultType">
            <summary>
            Gets the result type.
            </summary>
            <returns>
            The result type of current expression.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.LogicalAndBitwise.Or.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.LogicalAndBitwise.Or.Execute(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this OR expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.LogicalAndBitwise.Or.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.LogicalAndBitwise.Or.Clone">
            <summary>
            Clones this instance of the <see cref="T:xFunc.Maths.Expressions.LogicalAndBitwise.Or"/>.
            </summary>
            <returns>Returns the new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.LogicalAndBitwise.Or.LeftType">
            <summary>
            Gets the type of the left parameter.
            </summary>
            <value>
            The type of the left parameter.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.LogicalAndBitwise.Or.RightType">
            <summary>
            Gets the type of the right parameter.
            </summary>
            <value>
            The type of the right parameter.
            </value>
        </member>
        <member name="T:xFunc.Maths.Expressions.LogicalAndBitwise.Not">
            <summary>
            Represents a bitwise NOT operation.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.LogicalAndBitwise.Not.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.LogicalAndBitwise.Not"/> class.
            </summary>
            <param name="expression">The argument of function.</param>
            <seealso cref="T:xFunc.Maths.Expressions.IExpression"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.LogicalAndBitwise.Not.GetResultType">
            <summary>
            Gets the result type.
            </summary>
            <returns>
            The result type of current expression.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.LogicalAndBitwise.Not.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.LogicalAndBitwise.Not.Execute(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this bitwise NOT expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.LogicalAndBitwise.Not.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.LogicalAndBitwise.Not.Clone">
            <summary>
            Clones this instance of the <see cref="T:xFunc.Maths.Expressions.LogicalAndBitwise.Not"/>.
            </summary>
            <returns>Returns the new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.LogicalAndBitwise.Not.ArgumentType">
            <summary>
            Gets the type of the argument.
            </summary>
            <value>
            The type of the argument.
            </value>
        </member>
        <member name="T:xFunc.Maths.Expressions.Matrices.Determinant">
            <summary>
            Represents a determinant.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.Determinant.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Matrices.Determinant"/> class.
            </summary>
            <param name="argument">The argument of function.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.Determinant.GetResultType">
            <summary>
            Gets the result type.
            </summary>
            <returns>
            The result type of current expression.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.Determinant.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.Determinant.Execute(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.Determinant.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.Determinant.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>
            Returns the new instance of <see cref="T:xFunc.Maths.Expressions.IExpression" /> that is a clone of this instance.
            </returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.Matrices.Determinant.ArgumentType">
            <summary>
            Gets the type of the argument.
            </summary>
            <value>
            The type of the argument.
            </value>
        </member>
        <member name="T:xFunc.Maths.Expressions.Matrices.Inverse">
            <summary>
            Represents the Inverse function.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.Inverse.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Matrices.Inverse"/> class.
            </summary>
            <param name="argument">A matrix.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.Inverse.GetResultType">
            <summary>
            Gets the result type.
            </summary>
            <returns>
            The result type of current expression.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.Inverse.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.Inverse.Execute(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.Inverse.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.Inverse.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>
            Returns the new instance of <see cref="T:xFunc.Maths.Expressions.IExpression" /> that is a clone of this instance.
            </returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.Matrices.Inverse.ArgumentType">
            <summary>
            Gets the type of the argument.
            </summary>
            <value>
            The type of the argument.
            </value>
        </member>
        <member name="T:xFunc.Maths.Expressions.Matrices.Matrix">
            <summary>
            Represents a matrix.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.Matrix.#ctor(xFunc.Maths.Expressions.Matrices.Vector[])">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Matrices.Matrix"/> class.
            </summary>
            <param name="args">The arguments.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="args"/> is null.</exception>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.Matrix.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Matrices.Matrix"/> class.
            </summary>
            <param name="matrixSize">The size of the matrix.</param>
            <param name="vectorSize">The size of the vector.</param>
        </member>
        <member name="P:xFunc.Maths.Expressions.Matrices.Matrix.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:xFunc.Maths.Expressions.Matrices.Vector"/> at the specified index.
            </summary>
            <value>
            The <see cref="T:xFunc.Maths.Expressions.Matrices.Vector"/>.
            </value>
            <param name="index">The index.</param>
            <returns>The element of matrix.</returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.Matrices.Matrix.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the <see cref="T:xFunc.Maths.Expressions.IExpression"/> with the specified index.
            </summary>
            <value>
            The <see cref="T:xFunc.Maths.Expressions.IExpression"/>.
            </value>
            <param name="row">The row.</param>
            <param name="col">The column.</param>
            <returns>The element of matrix.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.Matrix.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.Matrix.Execute(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.Matrix.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.Matrix.Clone">
            <summary>
            Clones this instance of the <see cref="T:xFunc.Maths.Expressions.IExpression" />.
            </summary>
            <returns>
            Returns the new instance of <see cref="T:xFunc.Maths.Expressions.IExpression" /> that is a clone of this instance.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.Matrix.SwapRows(System.Int32,System.Int32)">
            <summary>
            Swaps the rows of matrix.
            </summary>
            <param name="firstIndex">The index of first row.</param>
            <param name="secondIndex">The index of second row.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="firstIndex"/> or <paramref name="secondIndex"/> is out of range.</exception>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.Matrix.SwapColumns(System.Int32,System.Int32)">
            <summary>
            Swaps the columns of matrix.
            </summary>
            <param name="firstIndex">The index of first column.</param>
            <param name="secondIndex">The index of second column.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="firstIndex"/> or <paramref name="secondIndex"/> is out of range.</exception>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.Matrix.CreateIdentity(System.Int32)">
            <summary>
            Creates an identity matrix.
            </summary>
            <param name="sizeOfMatrix">The size of matrix.</param>
            <returns>An identity matrix.</returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.Matrices.Matrix.Arguments">
            <summary>
            Gets or sets the arguments.
            </summary>
            <value>The arguments.</value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Matrices.Matrix.ArgumentsTypes">
            <summary>
            Gets the arguments types.
            </summary>
            <value>
            The arguments types.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Matrices.Matrix.SizeOfVectors">
            <summary>
            Gets the size of vectors.
            </summary>
            <value>
            The size of vectors.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Matrices.Matrix.MinParameters">
            <summary>
            Gets the minimum count of parameters.
            </summary>
            <value>
            The minimum count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Matrices.Matrix.MaxParameters">
            <summary>
            Gets the maximum count of parameters. -1 - Infinity.
            </summary>
            <value>
            The maximum count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Matrices.Matrix.IsSquare">
            <summary>
            Gets a value indicating whether matrix is square.
            </summary>
            <value>
              <c>true</c> if matrix is square; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Matrices.Matrix.ResultType">
            <summary>
            Gets the type of the result.
            </summary>
            <value>
            The type of the result.
            </value>
            <remarks>
            Usage of this property can affect performance. Don't use this property each time if you need to check result type of current expression. Just store/cache value only once and use it everywhere.
            </remarks>
        </member>
        <member name="T:xFunc.Maths.Expressions.Matrices.MatrixExtentions">
            <summary>
            Provides extention methods for matrices and vectors.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.MatrixExtentions.Abs(xFunc.Maths.Expressions.Matrices.Vector,xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates the absolute value (norm) of vector.
            </summary>
            <param name="vector">The vector.</param>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>Return the absolute value of vector.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.MatrixExtentions.Add(xFunc.Maths.Expressions.Matrices.Vector,xFunc.Maths.Expressions.Matrices.Vector)">
            <summary>
            Adds the <paramref name="right"/> vector to the <paramref name="left"/> vector.
            </summary>
            <param name="left">The left vector.</param>
            <param name="right">The right vector.</param>
            <returns>The sum of matrices.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.MatrixExtentions.Add(xFunc.Maths.Expressions.Matrices.Vector,xFunc.Maths.Expressions.Matrices.Vector,xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Adds the <paramref name="right"/> vector to the <paramref name="left"/> vector.
            </summary>
            <param name="left">The left vector.</param>
            <param name="right">The right vector.</param>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>The sum of matrices.</returns>
            <exception cref="T:System.ArgumentException">The size of matrices is invalid.</exception>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.MatrixExtentions.Sub(xFunc.Maths.Expressions.Matrices.Vector,xFunc.Maths.Expressions.Matrices.Vector)">
            <summary>
            Subtracts the <paramref name="right"/> vector from the <paramref name="left"/> vector.
            </summary>
            <param name="left">The left vector.</param>
            <param name="right">The right vector.</param>
            <returns>The difference of matrices.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.MatrixExtentions.Sub(xFunc.Maths.Expressions.Matrices.Vector,xFunc.Maths.Expressions.Matrices.Vector,xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Subtracts the <paramref name="right"/> vector from the <paramref name="left"/> vector.
            </summary>
            <param name="left">The left vector.</param>
            <param name="right">The right vector.</param>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>The difference of matrices.</returns>
            <exception cref="T:System.ArgumentException">The size of matrices is invalid.</exception>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.MatrixExtentions.Mul(xFunc.Maths.Expressions.Matrices.Vector,xFunc.Maths.Expressions.IExpression)">
            <summary>
            Multiplies <paramref name="vector"/> by <paramref name="number"/>.
            </summary>
            <param name="vector">The vector.</param>
            <param name="number">The number.</param>
            <returns>The product of matrices.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.MatrixExtentions.Mul(xFunc.Maths.Expressions.Matrices.Vector,xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Multiplies <paramref name="vector"/> by <paramref name="number"/>.
            </summary>
            <param name="vector">The vector.</param>
            <param name="number">The number.</param>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>The product of matrices.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.MatrixExtentions.Add(xFunc.Maths.Expressions.Matrices.Matrix,xFunc.Maths.Expressions.Matrices.Matrix)">
            <summary>
            Adds the <paramref name="right"/> matrix to the <paramref name="left"/> matrix.
            </summary>
            <param name="left">The left matrix.</param>
            <param name="right">The right matrix.</param>
            <returns>The sum of matrices.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.MatrixExtentions.Add(xFunc.Maths.Expressions.Matrices.Matrix,xFunc.Maths.Expressions.Matrices.Matrix,xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Adds the <paramref name="right"/> matrix to the <paramref name="left"/> matrix.
            </summary>
            <param name="left">The left matrix.</param>
            <param name="right">The right matrix.</param>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>The sum of matrices.</returns>
            <exception cref="T:System.ArgumentException">The size of matrices is invalid.</exception>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.MatrixExtentions.Sub(xFunc.Maths.Expressions.Matrices.Matrix,xFunc.Maths.Expressions.Matrices.Matrix)">
            <summary>
            Subtracts the <paramref name="right"/> matrix from the <paramref name="left"/> matrix.
            </summary>
            <param name="left">The left matrix.</param>
            <param name="right">The right matrix.</param>
            <returns>The difference of matrices.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.MatrixExtentions.Sub(xFunc.Maths.Expressions.Matrices.Matrix,xFunc.Maths.Expressions.Matrices.Matrix,xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Subtracts the <paramref name="right"/> matrix from the <paramref name="left"/> matrix.
            </summary>
            <param name="left">The left matrix.</param>
            <param name="right">The right matrix.</param>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>The difference of matrices.</returns>
            <exception cref="T:System.ArgumentException">The size of matrices is invalid.</exception>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.MatrixExtentions.Mul(xFunc.Maths.Expressions.Matrices.Matrix,xFunc.Maths.Expressions.IExpression)">
            <summary>
            Multiplies <paramref name="matrix"/> by <paramref name="number"/>.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="number">The number.</param>
            <returns>The product of matrix and number.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.MatrixExtentions.Mul(xFunc.Maths.Expressions.Matrices.Matrix,xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Multiplies <paramref name="matrix"/> by <paramref name="number"/>.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="number">The number.</param>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>The product of matrix and number.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.MatrixExtentions.Mul(xFunc.Maths.Expressions.Matrices.Matrix,xFunc.Maths.Expressions.Matrices.Matrix)">
            <summary>
            Multiplies the <paramref name="left" /> matrix by the <paramref name="right" /> matrix.
            </summary>
            <param name="left">The left matrix.</param>
            <param name="right">The right matrix.</param>
            <returns>
            The product of matrices.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.MatrixExtentions.Mul(xFunc.Maths.Expressions.Matrices.Matrix,xFunc.Maths.Expressions.Matrices.Matrix,xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Multiplies the <paramref name="left" /> matrix by the <paramref name="right" /> matrix.
            </summary>
            <param name="left">The left matrix.</param>
            <param name="right">The right matrix.</param>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            The product of matrices.
            </returns>
            <exception cref="T:System.ArgumentException">The size of matrices is invalid.</exception>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.MatrixExtentions.Mul(xFunc.Maths.Expressions.Matrices.Vector,xFunc.Maths.Expressions.Matrices.Matrix)">
            <summary>
            Multiplies the <paramref name="left" /> vector by the <paramref name="right" /> matrix.
            </summary>
            <param name="left">The left vector.</param>
            <param name="right">The right matrix.</param>
            <returns>
            The product of matrices.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.MatrixExtentions.Mul(xFunc.Maths.Expressions.Matrices.Vector,xFunc.Maths.Expressions.Matrices.Matrix,xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Multiplies the <paramref name="left" /> vector by the <paramref name="right" /> matrix.
            </summary>
            <param name="left">The left vector.</param>
            <param name="right">The right matrix.</param>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            The product of matrices.
            </returns>
            <exception cref="T:System.ArgumentException">The size of matrices is invalid.</exception>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.MatrixExtentions.Mul(xFunc.Maths.Expressions.Matrices.Matrix,xFunc.Maths.Expressions.Matrices.Vector)">
            <summary>
            Multiplies the <paramref name="left" /> matrix by the <paramref name="right" /> vector.
            </summary>
            <param name="left">The left matrix.</param>
            <param name="right">The right vector.</param>
            <returns>
            The product of matrices.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.MatrixExtentions.Mul(xFunc.Maths.Expressions.Matrices.Matrix,xFunc.Maths.Expressions.Matrices.Vector,xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Multiplies the <paramref name="left" /> matrix by the <paramref name="right" /> vector.
            </summary>
            <param name="left">The left matrix.</param>
            <param name="right">The right vector.</param>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            The product of matrices.
            </returns>
            <exception cref="T:System.ArgumentException">The size of matrices is invalid.</exception>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.MatrixExtentions.Transpose(xFunc.Maths.Expressions.Matrices.Vector)">
            <summary>
            Transposes the specified vector.
            </summary>
            <param name="vector">The vector.</param>
            <returns>The transposed matrix.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.MatrixExtentions.Transpose(xFunc.Maths.Expressions.Matrices.Matrix)">
            <summary>
            Transposes the specified matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>The transposed matrix.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.MatrixExtentions.Determinant(xFunc.Maths.Expressions.Matrices.Matrix)">
            <summary>
            Calculates a determinant of specified matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>The determinant of matrix.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.MatrixExtentions.Determinant(xFunc.Maths.Expressions.Matrices.Matrix,xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates a determinant of specified matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>The determinant of matrix.</returns>
            <exception cref="T:System.ArgumentException">The size of matrices is invalid.</exception>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.MatrixExtentions.LUPDecomposition(xFunc.Maths.Expressions.Matrices.Matrix,xFunc.Maths.Expressions.ExpressionParameters,System.Int32[]@,System.Int32@)">
            <summary>
            Decomposes a matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <param name="permutation">An array of permutations.</param>
            <param name="toggle">Used for calculating a determinant.</param>
            <returns>Combined Lower and Upper matrices.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.MatrixExtentions.Inverse(xFunc.Maths.Expressions.Matrices.Matrix,xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Inverts a matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>An inverse matrix.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.MatrixExtentions.Cross(xFunc.Maths.Expressions.Matrices.Vector,xFunc.Maths.Expressions.Matrices.Vector,xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Computes the cross product of two vectors.
            </summary>
            <param name="left">The vector.</param>
            <param name="right">The vector.</param>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>The cross product.</returns>
        </member>
        <member name="T:xFunc.Maths.Expressions.Matrices.MatrixIsInvalidException">
            <summary>
            Thrown in matrix building.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.MatrixIsInvalidException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Matrices.MatrixIsInvalidException"/> class.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.MatrixIsInvalidException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Matrices.MatrixIsInvalidException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.MatrixIsInvalidException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Matrices.MatrixIsInvalidException"/> class.
            </summary>
            <param name="message">A <see cref="T:System.String"/> that describes the error.</param>
            <param name="inner">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.MatrixIsInvalidException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Matrices.MatrixIsInvalidException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:xFunc.Maths.Expressions.Matrices.Transpose">
            <summary>
            Represets the Transpose function.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.Transpose.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Matrices.Transpose"/> class.
            </summary>
            <param name="argument">The expression, which returns matrix of vector.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.Transpose.GetResultType">
            <summary>
            Gets the result type.
            </summary>
            <returns>
            The result type of current expression.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.Transpose.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.Transpose.Execute(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
            <exception cref="T:System.NotSupportedException">Argument is not <see cref="T:xFunc.Maths.Expressions.Matrices.Matrix"/> or <see cref="T:xFunc.Maths.Expressions.Matrices.Vector"/>.</exception>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.Transpose.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.Transpose.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>
            Returns the new instance of <see cref="T:xFunc.Maths.Expressions.IExpression" /> that is a clone of this instance.
            </returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.Matrices.Transpose.ArgumentType">
            <summary>
            Gets the type of the argument.
            </summary>
            <value>
            The type of the argument.
            </value>
        </member>
        <member name="T:xFunc.Maths.Expressions.Matrices.Vector">
            <summary>
            Represents a vector.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.Vector.#ctor(xFunc.Maths.Expressions.IExpression[])">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Matrices.Vector"/> class.
            </summary>
            <param name="args">The values of vector.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="args"/> is null.</exception>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.Vector.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Matrices.Vector"/> class.
            </summary>
            <param name="size">The size of vector.</param>
        </member>
        <member name="P:xFunc.Maths.Expressions.Matrices.Vector.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:xFunc.Maths.Expressions.IExpression"/> at the specified index.
            </summary>
            <value>
            The <see cref="T:xFunc.Maths.Expressions.IExpression"/>.
            </value>
            <param name="index">The index.</param>
            <returns>The element of vector.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.Vector.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.Vector.Execute(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.Vector.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Matrices.Vector.Clone">
            <summary>
            Clones this instance of the <see cref="T:xFunc.Maths.Expressions.IExpression" />.
            </summary>
            <returns>
            Returns the new instance of <see cref="T:xFunc.Maths.Expressions.IExpression" /> that is a clone of this instance.
            </returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.Matrices.Vector.Arguments">
            <summary>
            Gets or sets the arguments.
            </summary>
            <value>
            The arguments.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Matrices.Vector.MinParameters">
            <summary>
            Gets the minimum count of parameters.
            </summary>
            <value>
            The minimum count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Matrices.Vector.MaxParameters">
            <summary>
            Gets the maximum count of parameters. -1 - Infinity.
            </summary>
            <value>
            The maximum count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Matrices.Vector.ResultType">
            <summary>
            Gets the type of the result.
            </summary>
            <value>
            The type of the result.
            </value>
            <remarks>
            Usage of this property can affect performance. Don't use this property each time if you need to check result type of current expression. Just store/cache value only once and use it everywhere.
            </remarks>
        </member>
        <member name="P:xFunc.Maths.Expressions.Matrices.Vector.ArgumentsTypes">
            <summary>
            Gets the arguments types.
            </summary>
            <value>
            The arguments types.
            </value>
        </member>
        <member name="T:xFunc.Maths.Expressions.Del">
            <summary>
            Represents the "Del" operator.
            </summary>
            <seealso cref="T:xFunc.Maths.Expressions.UnaryExpression" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Del.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Del"/> class.
            </summary>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Del.GetResultType">
            <summary>
            Gets the result type.
            </summary>
            <returns>
            The result type of current expression.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Del.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Del.Execute(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <exception cref="T:System.ArgumentNullException">The differentiator is null.</exception>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Del.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Del.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>
            Returns the new instance of <see cref="T:xFunc.Maths.Expressions.IExpression" /> that is a clone of this instance.
            </returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.Del.ArgumentType">
            <summary>
            Gets the type of the argument.
            </summary>
            <value>
            The type of the argument.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Del.Simplifier">
            <summary>
            Gets or sets the simplifier.
            </summary>
            <value>
            The simplifier.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Del.Differentiator">
            <summary>
            Gets or sets the differentiator.
            </summary>
            <value>
            The differentiator.
            </value>
        </member>
        <member name="T:xFunc.Maths.Expressions.Mod">
            <summary>
            Represents the Modulo operator.
            </summary>
            <seealso cref="T:xFunc.Maths.Expressions.BinaryExpression" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Mod.#ctor(xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Mod"/> class.
            </summary>
            <param name="left">The left (first) operand.</param>
            <param name="right">The right (second) operand.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Mod.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Mod.Execute(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Mod.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Mod.Clone">
            <summary>
            Creates the clone of this instance.
            </summary>
            <returns>
            Returns the new instance of <see cref="T:xFunc.Maths.Expressions.BinaryExpression" /> that is a clone of this instance.
            </returns>
        </member>
        <member name="T:xFunc.Maths.Expressions.ParameterTypeMismatchException">
            <summary>
            Represents an exception when the type of the actual argument does not match the expected parameter type.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.ParameterTypeMismatchException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.ParameterTypeMismatchException"/> class.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.ParameterTypeMismatchException.#ctor(xFunc.Maths.Expressions.ExpressionResultType,xFunc.Maths.Expressions.ExpressionResultType)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.ParameterTypeMismatchException"/> class.
            </summary>
            <param name="expected">The expected parameter type.</param>
            <param name="actual">The actual parameter type.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.ParameterTypeMismatchException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.ParameterTypeMismatchException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.ParameterTypeMismatchException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.ParameterTypeMismatchException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.ParameterTypeMismatchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.ParameterTypeMismatchException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
        </member>
        <member name="P:xFunc.Maths.Expressions.ParameterTypeMismatchException.Expected">
            <summary>
            Gets the expected parameter type.
            </summary>
            <value>
            The expected parameter type.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.ParameterTypeMismatchException.Actual">
            <summary>
            Gets the actual parameter type.
            </summary>
            <value>
            The actual parameter type.
            </value>
        </member>
        <member name="T:xFunc.Maths.Expressions.Statistical.Count">
            <summary>
            Represent the Count function.
            </summary>
            <seealso cref="T:xFunc.Maths.Expressions.DifferentParametersExpression" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Statistical.Count.#ctor(xFunc.Maths.Expressions.IExpression[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Statistical.Count"/> class.
            </summary>
            <param name="arguments">The arguments.</param>
            <param name="countOfParams">The count of parameters.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Statistical.Count.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Statistical.Count.Execute(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Statistical.Count.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Statistical.Count.Clone">
            <summary>
            Clones this instance of the <see cref="T:xFunc.Maths.Expressions.IExpression" />.
            </summary>
            <returns>
            Returns the new instance of <see cref="T:xFunc.Maths.Expressions.IExpression" /> that is a clone of this instance.
            </returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.Statistical.Count.ArgumentsTypes">
            <summary>
            Gets the arguments types.
            </summary>
            <value>
            The arguments types.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Statistical.Count.MinParameters">
            <summary>
            Gets the minimum count of parameters.
            </summary>
            <value>
            The minimum count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Statistical.Count.MaxParameters">
            <summary>
            Gets the maximum count of parameters. -1 - Infinity.
            </summary>
            <value>
            The maximum count of parameters.
            </value>
        </member>
        <member name="T:xFunc.Maths.Expressions.Statistical.Product">
            <summary>
            Represents the "product" function.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Statistical.Product.#ctor(xFunc.Maths.Expressions.IExpression[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Statistical.Product"/> class.
            </summary>
            <param name="args">The arguments.</param>
            <param name="countOfParams">The count of parameters.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="args"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The length of <paramref name="args"/> is not equal to <paramref name="countOfParams"/> or last parameter is not variable.</exception>
        </member>
        <member name="M:xFunc.Maths.Expressions.Statistical.Product.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Statistical.Product.Execute(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Statistical.Product.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Statistical.Product.Clone">
            <summary>
            Clones this instance of the <see cref="T:xFunc.Maths.Expressions.IExpression" />.
            </summary>
            <returns>
            Returns the new instance of <see cref="T:xFunc.Maths.Expressions.IExpression" /> that is a clone of this instance.
            </returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.Statistical.Product.MinParameters">
            <summary>
            Gets the minimum count of parameters.
            </summary>
            <value>
            The minimum count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Statistical.Product.MaxParameters">
            <summary>
            Gets the maximum count of parameters. -1 - Infinity.
            </summary>
            <value>
            The maximum count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Statistical.Product.ArgumentsTypes">
            <summary>
            Gets the arguments types.
            </summary>
            <value>
            The arguments types.
            </value>
        </member>
        <member name="T:xFunc.Maths.Expressions.Statistical.Avg">
            <summary>
            Represent the Avg function.
            </summary>
            <seealso cref="T:xFunc.Maths.Expressions.DifferentParametersExpression" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Statistical.Avg.#ctor(xFunc.Maths.Expressions.IExpression[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Statistical.Avg"/> class.
            </summary>
            <param name="arguments">The arguments.</param>
            <param name="countOfParams">The count of parameters.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Statistical.Avg.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Statistical.Avg.Execute(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Statistical.Avg.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Statistical.Avg.Clone">
            <summary>
            Clones this instance of the <see cref="T:xFunc.Maths.Expressions.IExpression" />.
            </summary>
            <returns>
            Returns the new instance of <see cref="T:xFunc.Maths.Expressions.IExpression" /> that is a clone of this instance.
            </returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.Statistical.Avg.ArgumentsTypes">
            <summary>
            Gets the arguments types.
            </summary>
            <value>
            The arguments types.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Statistical.Avg.MinParameters">
            <summary>
            Gets the minimum count of parameters.
            </summary>
            <value>
            The minimum count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Statistical.Avg.MaxParameters">
            <summary>
            Gets the maximum count of parameters. -1 - Infinity.
            </summary>
            <value>
            The maximum count of parameters.
            </value>
        </member>
        <member name="T:xFunc.Maths.Expressions.Statistical.Max">
            <summary>
            Represent the Max function.
            </summary>
            <seealso cref="T:xFunc.Maths.Expressions.DifferentParametersExpression" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Statistical.Max.#ctor(xFunc.Maths.Expressions.IExpression[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Statistical.Max"/> class.
            </summary>
            <param name="arguments">The arguments.</param>
            <param name="countOfParams">The count of parameters.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Statistical.Max.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Statistical.Max.Execute(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Statistical.Max.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Statistical.Max.Clone">
            <summary>
            Clones this instance of the <see cref="T:xFunc.Maths.Expressions.IExpression" />.
            </summary>
            <returns>
            Returns the new instance of <see cref="T:xFunc.Maths.Expressions.IExpression" /> that is a clone of this instance.
            </returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.Statistical.Max.ArgumentsTypes">
            <summary>
            Gets the arguments types.
            </summary>
            <value>
            The arguments types.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Statistical.Max.MinParameters">
            <summary>
            Gets the minimum count of parameters.
            </summary>
            <value>
            The minimum count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Statistical.Max.MaxParameters">
            <summary>
            Gets the maximum count of parameters. -1 - Infinity.
            </summary>
            <value>
            The maximum count of parameters.
            </value>
        </member>
        <member name="T:xFunc.Maths.Expressions.Statistical.Min">
            <summary>
            Represent the Min function.
            </summary>
            <seealso cref="T:xFunc.Maths.Expressions.DifferentParametersExpression" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Statistical.Min.#ctor(xFunc.Maths.Expressions.IExpression[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Statistical.Min"/> class.
            </summary>
            <param name="arguments">The arguments.</param>
            <param name="countOfParams">The count of parameters.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Statistical.Min.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Statistical.Min.Execute(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Statistical.Min.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Statistical.Min.Clone">
            <summary>
            Clones this instance of the <see cref="T:xFunc.Maths.Expressions.IExpression" />.
            </summary>
            <returns>
            Returns the new instance of <see cref="T:xFunc.Maths.Expressions.IExpression" /> that is a clone of this instance.
            </returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.Statistical.Min.ArgumentsTypes">
            <summary>
            Gets the arguments types.
            </summary>
            <value>
            The arguments types.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Statistical.Min.MinParameters">
            <summary>
            Gets the minimum count of parameters.
            </summary>
            <value>
            The minimum count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Statistical.Min.MaxParameters">
            <summary>
            Gets the maximum count of parameters. -1 - Infinity.
            </summary>
            <value>
            The maximum count of parameters.
            </value>
        </member>
        <member name="T:xFunc.Maths.Expressions.Statistical.Varp">
            <summary>
            Represents the VARP function.
            </summary>
            <seealso cref="T:xFunc.Maths.Expressions.DifferentParametersExpression" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Statistical.Varp.#ctor(xFunc.Maths.Expressions.IExpression[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Statistical.Varp"/> class.
            </summary>
            <param name="arguments">The arguments.</param>
            <param name="countOfParams">The count of parameters.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Statistical.Varp.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Statistical.Varp.Execute(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Statistical.Varp.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Statistical.Varp.Clone">
            <summary>
            Clones this instance of the <see cref="T:xFunc.Maths.Expressions.IExpression" />.
            </summary>
            <returns>
            Returns the new instance of <see cref="T:xFunc.Maths.Expressions.IExpression" /> that is a clone of this instance.
            </returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.Statistical.Varp.ArgumentsTypes">
            <summary>
            Gets the arguments types.
            </summary>
            <value>
            The arguments types.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Statistical.Varp.MinParameters">
            <summary>
            Gets the minimum count of parameters.
            </summary>
            <value>
            The minimum count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Statistical.Varp.MaxParameters">
            <summary>
            Gets the maximum count of parameters. -1 - Infinity.
            </summary>
            <value>
            The maximum count of parameters.
            </value>
        </member>
        <member name="T:xFunc.Maths.Expressions.Statistical.Var">
            <summary>
            Represents the VAR function.
            </summary>
            <seealso cref="T:xFunc.Maths.Expressions.DifferentParametersExpression" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Statistical.Var.#ctor(xFunc.Maths.Expressions.IExpression[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Statistical.Var"/> class.
            </summary>
            <param name="arguments">The arguments.</param>
            <param name="countOfParams">The count of parameters.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Statistical.Var.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Statistical.Var.Execute(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Statistical.Var.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Statistical.Var.Clone">
            <summary>
            Clones this instance of the <see cref="T:xFunc.Maths.Expressions.IExpression" />.
            </summary>
            <returns>
            Returns the new instance of <see cref="T:xFunc.Maths.Expressions.IExpression" /> that is a clone of this instance.
            </returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.Statistical.Var.ArgumentsTypes">
            <summary>
            Gets the arguments types.
            </summary>
            <value>
            The arguments types.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Statistical.Var.MinParameters">
            <summary>
            Gets the minimum count of parameters.
            </summary>
            <value>
            The minimum count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Statistical.Var.MaxParameters">
            <summary>
            Gets the maximum count of parameters. -1 - Infinity.
            </summary>
            <value>
            The maximum count of parameters.
            </value>
        </member>
        <member name="T:xFunc.Maths.Expressions.Statistical.Stdevp">
            <summary>
            Represents the STDEVP function.
            </summary>
            <seealso cref="T:xFunc.Maths.Expressions.DifferentParametersExpression" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Statistical.Stdevp.#ctor(xFunc.Maths.Expressions.IExpression[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Statistical.Stdevp"/> class.
            </summary>
            <param name="arguments">The arguments.</param>
            <param name="countOfParams">The count of parameters.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Statistical.Stdevp.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Statistical.Stdevp.Execute(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Statistical.Stdevp.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Statistical.Stdevp.Clone">
            <summary>
            Clones this instance of the <see cref="T:xFunc.Maths.Expressions.IExpression" />.
            </summary>
            <returns>
            Returns the new instance of <see cref="T:xFunc.Maths.Expressions.IExpression" /> that is a clone of this instance.
            </returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.Statistical.Stdevp.ArgumentsTypes">
            <summary>
            Gets the arguments types.
            </summary>
            <value>
            The arguments types.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Statistical.Stdevp.MinParameters">
            <summary>
            Gets the minimum count of parameters.
            </summary>
            <value>
            The minimum count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Statistical.Stdevp.MaxParameters">
            <summary>
            Gets the maximum count of parameters. -1 - Infinity.
            </summary>
            <value>
            The maximum count of parameters.
            </value>
        </member>
        <member name="T:xFunc.Maths.Expressions.Statistical.Stdev">
            <summary>
            Represents the STDEV function.
            </summary>
            <seealso cref="T:xFunc.Maths.Expressions.DifferentParametersExpression" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Statistical.Stdev.#ctor(xFunc.Maths.Expressions.IExpression[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Statistical.Stdev"/> class.
            </summary>
            <param name="arguments">The arguments.</param>
            <param name="countOfParams">The count of parameters.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Statistical.Stdev.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Statistical.Stdev.Execute(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Statistical.Stdev.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Statistical.Stdev.Clone">
            <summary>
            Clones this instance of the <see cref="T:xFunc.Maths.Expressions.IExpression" />.
            </summary>
            <returns>
            Returns the new instance of <see cref="T:xFunc.Maths.Expressions.IExpression" /> that is a clone of this instance.
            </returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.Statistical.Stdev.ArgumentsTypes">
            <summary>
            Gets the arguments types.
            </summary>
            <value>
            The arguments types.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Statistical.Stdev.MinParameters">
            <summary>
            Gets the minimum count of parameters.
            </summary>
            <value>
            The minimum count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Statistical.Stdev.MaxParameters">
            <summary>
            Gets the maximum count of parameters. -1 - Infinity.
            </summary>
            <value>
            The maximum count of parameters.
            </value>
        </member>
        <member name="T:xFunc.Maths.Expressions.Statistical.Sum">
            <summary>
            Represents the "sum" function.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Statistical.Sum.#ctor(xFunc.Maths.Expressions.IExpression[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Statistical.Sum"/> class.
            </summary>
            <param name="args">The arguments.</param>
            <param name="countOfParams">The count of parameters.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="args"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The length of <paramref name="args"/> is not equal to <paramref name="countOfParams"/> or last parameter is not variable.</exception>
        </member>
        <member name="M:xFunc.Maths.Expressions.Statistical.Sum.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Statistical.Sum.Execute(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Statistical.Sum.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Statistical.Sum.Clone">
            <summary>
            Clones this instance of the <see cref="T:xFunc.Maths.Expressions.IExpression" />.
            </summary>
            <returns>
            Returns the new instance of <see cref="T:xFunc.Maths.Expressions.IExpression" /> that is a clone of this instance.
            </returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.Statistical.Sum.MinParameters">
            <summary>
            Gets the minimum count of parameters.
            </summary>
            <value>
            The minimum count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Statistical.Sum.MaxParameters">
            <summary>
            Gets the maximum count of parameters. -1 - Infinity.
            </summary>
            <value>
            The maximum count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Statistical.Sum.ArgumentsTypes">
            <summary>
            Gets the arguments types.
            </summary>
            <value>
            The arguments types.
            </value>
        </member>
        <member name="T:xFunc.Maths.Expressions.Programming.AddAssign">
            <summary>
            Represents the "+=" operation.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.AddAssign.#ctor(xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Programming.AddAssign"/> class.
            </summary>
            <param name="variable">The variable.</param>
            <param name="exp">The expression.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.AddAssign.Execute(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.AddAssign.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.AddAssign.Clone">
            <summary>
            Creates the clone of this instance.
            </summary>
            <returns>
            Returns the new instance of <see cref="T:xFunc.Maths.Expressions.Programming.AddAssign" /> that is a clone of this instance.
            </returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.Programming.AddAssign.Left">
            <summary>
            The left (first) operand.
            </summary>
        </member>
        <member name="T:xFunc.Maths.Expressions.Programming.And">
            <summary>
            Represents a conditional-AND operator.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.And.#ctor(xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Programming.And"/> class.
            </summary>
            <param name="left">The left (first) operand.</param>
            <param name="right">The right (second) operand.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.And.GetResultType">
            <summary>
            Gets the result type.
            </summary>
            <returns>
            The result type of current expression.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.And.Execute(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.And.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.And.Clone">
            <summary>
            Creates the clone of this instance.
            </summary>
            <returns>
            Returns the new instance of <see cref="T:xFunc.Maths.Expressions.Programming.And" /> that is a clone of this instance.
            </returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.Programming.And.LeftType">
            <summary>
            Gets the type of the left parameter.
            </summary>
            <value>
            The type of the left parameter.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Programming.And.RightType">
            <summary>
            Gets the type of the right parameter.
            </summary>
            <value>
            The type of the right parameter.
            </value>
        </member>
        <member name="T:xFunc.Maths.Expressions.Programming.Dec">
            <summary>
            Represents the decrement operator.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.Dec.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Programming.Dec"/> class.
            </summary>
            <param name="argument">The expression.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.Dec.Execute(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.Dec.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.Dec.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>
            Returns the new instance of <see cref="T:xFunc.Maths.Expressions.Programming.Inc" /> that is a clone of this instance.
            </returns>
        </member>
        <member name="T:xFunc.Maths.Expressions.Programming.DivAssign">
            <summary>
            Represents the "/=" operation.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.DivAssign.#ctor(xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Programming.DivAssign" /> class.
            </summary>
            <param name="variable">The variable.</param>
            <param name="exp">The expression.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.DivAssign.Execute(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.DivAssign.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.DivAssign.Clone">
            <summary>
            Creates the clone of this instance.
            </summary>
            <returns>
            Returns the new instance of <see cref="T:xFunc.Maths.Expressions.Programming.DivAssign" /> that is a clone of this instance.
            </returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.Programming.DivAssign.Left">
            <summary>
            The left (first) operand.
            </summary>
        </member>
        <member name="T:xFunc.Maths.Expressions.Programming.Equal">
            <summary>
            Represents the equality operator.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.Equal.#ctor(xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Programming.Equal"/> class.
            </summary>
            <param name="left">The left (first) operand.</param>
            <param name="right">The right (second) operand.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.Equal.GetResultType">
            <summary>
            Gets the result type.
            </summary>
            <returns>
            The result type of current expression.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.Equal.Execute(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.Equal.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.Equal.Clone">
            <summary>
            Creates the clone of this instance.
            </summary>
            <returns>
            Returns the new instance of <see cref="T:xFunc.Maths.Expressions.Programming.Equal" /> that is a clone of this instance.
            </returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.Programming.Equal.LeftType">
            <summary>
            Gets the type of the left parameter.
            </summary>
            <value>
            The type of the left parameter.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Programming.Equal.RightType">
            <summary>
            Gets the type of the right parameter.
            </summary>
            <value>
            The type of the right parameter.
            </value>
        </member>
        <member name="T:xFunc.Maths.Expressions.Programming.For">
            <summary>
            Represents the "for" loop.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.For.#ctor(xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Programming.For"/> class.
            </summary>
            <param name="body">The body of loop.</param>
            <param name="init">The initializer section.</param>
            <param name="cond">The condition section.</param>
            <param name="iter">The itererator section.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.For.#ctor(xFunc.Maths.Expressions.IExpression[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Programming.For" /> class.
            </summary>
            <param name="arguments">The arguments.</param>
            <param name="countOfParams">The count of parameters.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="arguments"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The length of <paramref name="arguments"/> is not equal to <paramref name="countOfParams"/>.</exception>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.For.Execute(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.For.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.For.Clone">
            <summary>
            Clones this instance of the <see cref="T:xFunc.Maths.Expressions.Programming.For" />.
            </summary>
            <returns>
            Returns the new instance of <see cref="T:xFunc.Maths.Expressions.Programming.For" /> that is a clone of this instance.
            </returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.Programming.For.MinParameters">
            <summary>
            Gets the minimum count of parameters.
            </summary>
            <value>
            The minimum count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Programming.For.MaxParameters">
            <summary>
            Gets the maximum count of parameters. -1 - Infinity.
            </summary>
            <value>
            The maximum count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Programming.For.Body">
            <summary>
            Gets the body of loop.
            </summary>
            <value>
            The body of loop.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Programming.For.Initialization">
            <summary>
            Gets the initializer section.
            </summary>
            <value>
            The initializer section.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Programming.For.Condition">
            <summary>
            Gets the condition section.
            </summary>
            <value>
            The condition section.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Programming.For.Iteration">
            <summary>
            Gets the iterator section.
            </summary>
            <value>
            The iterator section.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Programming.For.ResultType">
            <summary>
            Gets the type of the result.
            </summary>
            <value>
            The type of the result.
            </value>
            <remarks>
            Usage of this property can affect performance. Don't use this property each time if you need to check result type of current expression. Just store/cache value only once and use it everywhere.
            </remarks>
        </member>
        <member name="P:xFunc.Maths.Expressions.Programming.For.ArgumentsTypes">
            <summary>
            Gets the arguments types.
            </summary>
            <value>
            The arguments types.
            </value>
        </member>
        <member name="T:xFunc.Maths.Expressions.Programming.GreaterOrEqual">
            <summary>
            Represents the "greater or equal" operator.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.GreaterOrEqual.#ctor(xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Programming.GreaterOrEqual"/> class.
            </summary>
            <param name="left">The left (first) operand.</param>
            <param name="right">The right (second) operand.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.GreaterOrEqual.GetResultType">
            <summary>
            Gets the result type.
            </summary>
            <returns>
            The result type of current expression.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.GreaterOrEqual.Execute(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.GreaterOrEqual.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.GreaterOrEqual.Clone">
            <summary>
            Creates the clone of this instance.
            </summary>
            <returns>
            Returns the new instance of <see cref="T:xFunc.Maths.Expressions.Programming.GreaterOrEqual" /> that is a clone of this instance.
            </returns>
        </member>
        <member name="T:xFunc.Maths.Expressions.Programming.GreaterThan">
            <summary>
            Represents the "greater than" operator.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.GreaterThan.#ctor(xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Programming.GreaterThan"/> class.
            </summary>
            <param name="left">The left (first) operand.</param>
            <param name="right">The right (second) operand.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.GreaterThan.GetResultType">
            <summary>
            Gets the result type.
            </summary>
            <returns>
            The result type of current expression.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.GreaterThan.Execute(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.GreaterThan.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.GreaterThan.Clone">
            <summary>
            Creates the clone of this instance.
            </summary>
            <returns>
            Returns the new instance of <see cref="T:xFunc.Maths.Expressions.Programming.GreaterThan" /> that is a clone of this instance.
            </returns>
        </member>
        <member name="T:xFunc.Maths.Expressions.Programming.If">
            <summary>
            Represents the "if-else" statement.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.If.#ctor(xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Programming.If"/> class.
            </summary>
            <param name="condition">The condition.</param>
            <param name="then">The "then" statement.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.If.#ctor(xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Programming.If"/> class.
            </summary>
            <param name="condition">The condition.</param>
            <param name="then">The "then" statement.</param>
            <param name="else">The "else" statement.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.If.#ctor(xFunc.Maths.Expressions.IExpression[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Programming.If"/> class.
            </summary>
            <param name="arguments">The arguments.</param>
            <param name="countOfParams">The count of parameters.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.If.Execute(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.If.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.If.Clone">
            <summary>
            Clones this instance of the <see cref="T:xFunc.Maths.Expressions.Programming.If" />.
            </summary>
            <returns>
            Returns the new instance of <see cref="T:xFunc.Maths.Expressions.Programming.If" /> that is a clone of this instance.
            </returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.Programming.If.MinParameters">
            <summary>
            Gets the minimum count of parameters.
            </summary>
            <value>
            The minimum count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Programming.If.MaxParameters">
            <summary>
            Gets the maximum count of parameters. -1 - Infinity.
            </summary>
            <value>
            The maximum count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Programming.If.Condition">
            <summary>
            Gets the condition.
            </summary>
            <value>
            The condition.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Programming.If.Then">
            <summary>
            Gets the "then" statement.
            </summary>
            <value>
            The then.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Programming.If.Else">
            <summary>
            Gets the "else" statement.
            </summary>
            <value>
            The else.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Programming.If.ResultType">
            <summary>
            Gets the type of the result.
            </summary>
            <value>
            The type of the result.
            </value>
            <remarks>
            Usage of this property can affect performance. Don't use this property each time if you need to check result type of current expression. Just store/cache value only once and use it everywhere.
            </remarks>
        </member>
        <member name="P:xFunc.Maths.Expressions.Programming.If.ArgumentsTypes">
            <summary>
            Gets the arguments types.
            </summary>
            <value>
            The arguments types.
            </value>
        </member>
        <member name="T:xFunc.Maths.Expressions.Programming.Inc">
            <summary>
            Represents the increment operator.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.Inc.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Programming.Inc"/> class.
            </summary>
            <param name="argument">The expression.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.Inc.Execute(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.Inc.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.Inc.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>
            Returns the new instance of <see cref="T:xFunc.Maths.Expressions.Programming.Inc" /> that is a clone of this instance.
            </returns>
        </member>
        <member name="T:xFunc.Maths.Expressions.Programming.LessOrEqual">
            <summary>
            Represents the "less than or equal" operator.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.LessOrEqual.#ctor(xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Programming.LessOrEqual"/> class.
            </summary>
            <param name="left">The left (first) operand.</param>
            <param name="right">The right (second) operand.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.LessOrEqual.GetResultType">
            <summary>
            Gets the result type.
            </summary>
            <returns>
            The result type of current expression.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.LessOrEqual.Execute(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.LessOrEqual.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.LessOrEqual.Clone">
            <summary>
            Creates the clone of this instance.
            </summary>
            <returns>
            Returns the new instance of <see cref="T:xFunc.Maths.Expressions.Programming.LessOrEqual" /> that is a clone of this instance.
            </returns>
        </member>
        <member name="T:xFunc.Maths.Expressions.Programming.LessThan">
            <summary>
            Represents the "less than" operator.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.LessThan.#ctor(xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Programming.LessThan"/> class.
            </summary>
            <param name="left">The left (first) operand.</param>
            <param name="right">The right (second) operand.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.LessThan.GetResultType">
            <summary>
            Gets the result type.
            </summary>
            <returns>
            The result type of current expression.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.LessThan.Execute(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.LessThan.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.LessThan.Clone">
            <summary>
            Creates the clone of this instance.
            </summary>
            <returns>
            Returns the new instance of <see cref="T:xFunc.Maths.Expressions.Programming.LessThan" /> that is a clone of this instance.
            </returns>
        </member>
        <member name="T:xFunc.Maths.Expressions.Programming.MulAssign">
            <summary>
            Represents the "*=" operation.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.MulAssign.#ctor(xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Programming.MulAssign"/> class.
            </summary>
            <param name="variable">The variable.</param>
            <param name="exp">The expression.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.MulAssign.Execute(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.MulAssign.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.MulAssign.Clone">
            <summary>
            Creates the clone of this instance.
            </summary>
            <returns>
            Returns the new instance of <see cref="T:xFunc.Maths.Expressions.Programming.MulAssign" /> that is a clone of this instance.
            </returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.Programming.MulAssign.Left">
            <summary>
            The left (first) operand.
            </summary>
        </member>
        <member name="T:xFunc.Maths.Expressions.Programming.NotEqual">
            <summary>
            Represents the inequality operator.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.NotEqual.#ctor(xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Programming.NotEqual"/> class.
            </summary>
            <param name="left">The left (first) operand.</param>
            <param name="right">The right (second) operand.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.NotEqual.GetResultType">
            <summary>
            Gets the result type.
            </summary>
            <returns>
            The result type of current expression.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.NotEqual.Execute(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.NotEqual.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.NotEqual.Clone">
            <summary>
            Creates the clone of this instance.
            </summary>
            <returns>
            Returns the new instance of <see cref="T:xFunc.Maths.Expressions.Programming.NotEqual" /> that is a clone of this instance.
            </returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.Programming.NotEqual.LeftType">
            <summary>
            Gets the type of the left parameter.
            </summary>
            <value>
            The type of the left parameter.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Programming.NotEqual.RightType">
            <summary>
            Gets the type of the right parameter.
            </summary>
            <value>
            The type of the right parameter.
            </value>
        </member>
        <member name="T:xFunc.Maths.Expressions.Programming.Or">
            <summary>
            Represents a conditional-OR operator.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.Or.#ctor(xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Programming.Or"/> class.
            </summary>
            <param name="left">The left (first) operand.</param>
            <param name="right">The right (second) operand.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.Or.GetResultType">
            <summary>
            Gets the result type.
            </summary>
            <returns>
            The result type of current expression.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.Or.Execute(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.Or.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.Or.Clone">
            <summary>
            Creates the clone of this instance.
            </summary>
            <returns>
            Returns the new instance of <see cref="T:xFunc.Maths.Expressions.Programming.Or" /> that is a clone of this instance.
            </returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.Programming.Or.LeftType">
            <summary>
            Gets the type of the left parameter.
            </summary>
            <value>
            The type of the left parameter.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Programming.Or.RightType">
            <summary>
            Gets the type of the right parameter.
            </summary>
            <value>
            The type of the right parameter.
            </value>
        </member>
        <member name="T:xFunc.Maths.Expressions.Programming.SubAssign">
            <summary>
            Represents the "-=" operation.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.SubAssign.#ctor(xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Programming.SubAssign"/> class.
            </summary>
            <param name="variable">The variable.</param>
            <param name="exp">The expression.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.SubAssign.Execute(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.SubAssign.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.SubAssign.Clone">
            <summary>
            Creates the clone of this instance.
            </summary>
            <returns>
            Returns the new instance of <see cref="T:xFunc.Maths.Expressions.Programming.SubAssign" /> that is a clone of this instance.
            </returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.Programming.SubAssign.Left">
            <summary>
            The left (first) operand.
            </summary>
        </member>
        <member name="T:xFunc.Maths.Expressions.Programming.While">
            <summary>
            Represents the "while" loop.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.While.#ctor(xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Programming.While"/> class.
            </summary>
            <param name="body">The body of while loop.</param>
            <param name="condition">The condition of loop.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.While.GetResultType">
            <summary>
            Gets the result type.
            </summary>
            <returns>
            The result type of current expression.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.While.Execute(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.While.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Programming.While.Clone">
            <summary>
            Creates the clone of this instance.
            </summary>
            <returns>
            Returns the new instance of <see cref="T:xFunc.Maths.Expressions.Programming.While" /> that is a clone of this instance.
            </returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.Programming.While.LeftType">
            <summary>
            Gets the type of the left parameter.
            </summary>
            <value>
            The type of the left parameter.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Programming.While.RightType">
            <summary>
            Gets the type of the right parameter.
            </summary>
            <value>
            The type of the right parameter.
            </value>
        </member>
        <member name="T:xFunc.Maths.Expressions.Round">
            <summary>
            Represents the "round" function.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Round.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Round"/> class.
            </summary>
            <param name="argument">The expression that represents a double-precision floating-point number to be rounded.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Round.#ctor(xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Round"/> class.
            </summary>
            <param name="argument">The expression that represents a double-precision floating-point number to be rounded.</param>
            <param name="digits">The expression that represents the number of fractional digits in the return value.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Round.#ctor(xFunc.Maths.Expressions.IExpression[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Round"/> class.
            </summary>
            <param name="args">The arguments.</param>
            <param name="countOfParams">The count of parameters.</param>
            <exception cref="T:System.ArgumentNullException">args</exception>
            <exception cref="T:System.ArgumentException">The length of <paramref name="args"/> is not equal to <paramref name="countOfParams"/>.</exception>
        </member>
        <member name="M:xFunc.Maths.Expressions.Round.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Round.Execute(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Round.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Round.Clone">
            <summary>
            Clones this instance of the <see cref="T:xFunc.Maths.Expressions.IExpression" />.
            </summary>
            <returns>
            Returns the new instance of <see cref="T:xFunc.Maths.Expressions.IExpression" /> that is a clone of this instance.
            </returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.Round.MinParameters">
            <summary>
            Gets the minimum count of parameters.
            </summary>
            <value>
            The minimum count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Round.MaxParameters">
            <summary>
            Gets the maximum count of parameters. -1 - Infinity.
            </summary>
            <value>
            The maximum count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Round.Argument">
            <summary>
            The expression that represents a double-precision floating-point number to be rounded.
            </summary>
            <value>
            The expression that represents a double-precision floating-point number to be rounded.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Round.Digits">
            <summary>
            The expression that represents the number of fractional digits in the return value.
            </summary>
            <value>
            The expression that represents the number of fractional digits in the return value.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Round.ArgumentsTypes">
            <summary>
            Gets the arguments types.
            </summary>
            <value>
            The arguments types.
            </value>
        </member>
        <member name="T:xFunc.Maths.Expressions.Simplify">
            <summary>
            Represents the Simplify operation.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Simplify.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Simplify"/> class.
            </summary>
            <param name="expression">The argument of function.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Simplify.GetResultType">
            <summary>
            Gets the result type.
            </summary>
            <returns>
            The result type of current expression.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Simplify.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Simplify.Execute(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <exception cref="T:System.ArgumentNullException">Simplifier is null.</exception>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Simplify.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Simplify.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>Returns the new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.Simplify.ArgumentType">
            <summary>
            Gets the type of the argument.
            </summary>
            <value>
            The type of the argument.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Simplify.Simplifier">
            <summary>
            Gets or sets the simplifier.
            </summary>
            <value>
            The simplifier.
            </value>
        </member>
        <member name="T:xFunc.Maths.Expressions.Abs">
            <summary>
            Represents the Absolute operation.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Abs.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Abs"/> class.
            </summary>
            <param name="expression">The argument of function.</param>
            <seealso cref="T:xFunc.Maths.Expressions.IExpression"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Abs.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Abs.Execute(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this Absolute expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Abs.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Abs.Clone">
            <summary>
            Clones this instance of the <see cref="T:xFunc.Maths.Expressions.Abs"/> class.
            </summary>
            <returns>Returns the new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.Abs.ArgumentType">
            <summary>
            Gets the type of the argument.
            </summary>
            <value>
            The type of the argument.
            </value>
        </member>
        <member name="T:xFunc.Maths.Expressions.Add">
            <summary>
            Represents an Addition operation.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Add.#ctor(xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Add"/> class.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <seealso cref="T:xFunc.Maths.Expressions.IExpression"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Add.GetResultType">
            <summary>
            Gets the result type.
            </summary>
            <returns>
            The result type of current expression.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Add.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Add.Execute(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Add.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Add.Clone">
            <summary>
            Clones this instance of the <see cref="T:xFunc.Maths.Expressions.Add"/>.
            </summary>
            <returns>Returns the new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.Add.LeftType">
            <summary>
            Gets the type of the left parameter.
            </summary>
            <value>
            The type of the left parameter.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Add.RightType">
            <summary>
            Gets the type of the right parameter.
            </summary>
            <value>
            The type of the right parameter.
            </value>
        </member>
        <member name="T:xFunc.Maths.Expressions.AngleMeasurement">
            <summary>
            Specifies a measurement of angle.
            </summary>
        </member>
        <member name="F:xFunc.Maths.Expressions.AngleMeasurement.Degree">
            <summary>
            Degree.
            </summary>
        </member>
        <member name="F:xFunc.Maths.Expressions.AngleMeasurement.Radian">
            <summary>
            Radian.
            </summary>
        </member>
        <member name="F:xFunc.Maths.Expressions.AngleMeasurement.Gradian">
            <summary>
            Gradian.
            </summary>
        </member>
        <member name="T:xFunc.Maths.Expressions.Trigonometric.Arccos">
            <summary>
            Represents the Arccosine function.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Arccos.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Trigonometric.Arccos"/> class.
            </summary>
            <param name="expression">The argument of function.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Arccos.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Arccos.ExecuteDergee(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathematical expression (using degree).
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Arccos.ExecuteRadian(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathematical expression (using radian).
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Arccos.ExecuteGradian(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathematical expression (using gradian).
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Arccos.ExecuteComplex(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates the this mathematical expression (complex number).
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Arccos.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Arccos.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>The new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="T:xFunc.Maths.Expressions.Trigonometric.Arccot">
            <summary>
            Represents the Arcotangent function.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Arccot.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Trigonometric.Arccot"/> class.
            </summary>
            <param name="expression">The argument of function.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Arccot.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Arccot.ExecuteDergee(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathematical expression (using degree).
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Arccot.ExecuteRadian(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathematical expression (using radian).
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Arccot.ExecuteGradian(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathematical expression (using gradian).
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Arccot.ExecuteComplex(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates the this mathematical expression (complex number).
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Arccot.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Arccot.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>The new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="T:xFunc.Maths.Expressions.Trigonometric.Arccsc">
            <summary>
            Represents the Arccosecant function.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Arccsc.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Trigonometric.Arccsc"/> class.
            </summary>
            <param name="expression">The argument of function.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Arccsc.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Arccsc.ExecuteDergee(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathematical expression (using degree).
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Arccsc.ExecuteRadian(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathematical expression (using radian).
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Arccsc.ExecuteGradian(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathematical expression (using gradian).
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Arccsc.ExecuteComplex(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates the this mathematical expression (complex number).
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Arccsc.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Arccsc.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>The new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="T:xFunc.Maths.Expressions.Trigonometric.Arcsec">
            <summary>
            Represents the Arcsecant function.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Arcsec.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Trigonometric.Arcsec"/> class.
            </summary>
            <param name="expression">The argument of function.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Arcsec.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Arcsec.ExecuteDergee(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathematical expression (using degree).
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Arcsec.ExecuteRadian(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathematical expression (using radian).
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Arcsec.ExecuteGradian(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathematical expression (using gradian).
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Arcsec.ExecuteComplex(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates the this mathematical expression (complex number).
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Arcsec.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Arcsec.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>The new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="T:xFunc.Maths.Expressions.Trigonometric.Arcsin">
            <summary>
            Represents teh Arcsine function.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Arcsin.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Trigonometric.Arcsin"/> class.
            </summary>
            <param name="expression">The argument of function.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Arcsin.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Arcsin.ExecuteDergee(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathematical expression (using degree).
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Arcsin.ExecuteRadian(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathematical expression (using radian).
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Arcsin.ExecuteGradian(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathematical expression (using gradian).
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Arcsin.ExecuteComplex(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates the this mathematical expression (complex number).
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Arcsin.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Arcsin.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>The new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="T:xFunc.Maths.Expressions.Trigonometric.Arctan">
            <summary>
            Represents the Arctangent function.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Arctan.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Trigonometric.Arctan"/> class.
            </summary>
            <param name="expression">The argument of function.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Arctan.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Arctan.ExecuteDergee(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathematical expression (using degree).
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Arctan.ExecuteRadian(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathematical expression (using radian).
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Arctan.ExecuteGradian(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathematical expression (using gradian).
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Arctan.ExecuteComplex(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates the this mathematical expression (complex number).
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Arctan.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Arctan.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>The new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="T:xFunc.Maths.Expressions.Trigonometric.Csc">
            <summary>
            Represents the Cosecant function.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Csc.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Trigonometric.Csc"/> class.
            </summary>
            <param name="expression">The argument of function.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Csc.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Csc.ExecuteDergee(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathematical expression (using degree).
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Csc.ExecuteRadian(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathematical expression (using radian).
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Csc.ExecuteGradian(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathematical expression (using gradian).
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Csc.ExecuteComplex(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates the this mathematical expression (complex number).
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Csc.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Csc.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>The new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="T:xFunc.Maths.Expressions.Trigonometric.Cos">
            <summary>
            Represents the Cosine function.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Cos.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Trigonometric.Cos"/> class.
            </summary>
            <param name="expression">The argument of function.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Cos.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Cos.ExecuteDergee(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathematical expression (using degree).
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Cos.ExecuteRadian(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathematical expression (using radian).
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Cos.ExecuteGradian(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathematical expression (using gradian).
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Cos.ExecuteComplex(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates the this mathematical expression (complex number).
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Cos.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Cos.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>The new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="T:xFunc.Maths.Expressions.Trigonometric.Cot">
            <summary>
            Represents the Cotangent function.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Cot.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Trigonometric.Cot"/> class.
            </summary>
            <param name="expression">The argument of function.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Cot.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Cot.ExecuteDergee(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathematical expression (using degree).
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Cot.ExecuteRadian(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathematical expression (using radian).
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Cot.ExecuteGradian(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathematical expression (using gradian).
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Cot.ExecuteComplex(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates the this mathematical expression (complex number).
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Cot.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Cot.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>The new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="T:xFunc.Maths.Expressions.Trigonometric.Sec">
            <summary>
            Represents the Secant function.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Sec.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Trigonometric.Sec"/> class.
            </summary>
            <param name="expression">The argument of function.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Sec.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Sec.ExecuteDergee(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathematical expression (using degree).
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Sec.ExecuteRadian(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathematical expression (using radian).
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Sec.ExecuteGradian(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathematical expression (using gradian).
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Sec.ExecuteComplex(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates the this mathematical expression (complex number).
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Sec.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Sec.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>The new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="T:xFunc.Maths.Expressions.Trigonometric.Sin">
            <summary>
            Represents the Sine function.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Sin.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Trigonometric.Sin"/> class.
            </summary>
            <param name="expression">The argument of function.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Sin.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Sin.ExecuteDergee(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathematical expression (using degree).
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Sin.ExecuteRadian(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathematical expression (using radian).
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Sin.ExecuteGradian(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathematical expression (using gradian).
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Sin.ExecuteComplex(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates the this mathematical expression (complex number).
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Sin.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Sin.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>The new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="T:xFunc.Maths.Expressions.Trigonometric.Tan">
            <summary>
            Represents the Tangent function.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Tan.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Trigonometric.Tan"/> class.
            </summary>
            <param name="expression">The argument of function.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Tan.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Tan.ExecuteDergee(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathematical expression (using degree).
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Tan.ExecuteRadian(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathematical expression (using radian).
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Tan.ExecuteGradian(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathematical expression (using gradian).
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Tan.ExecuteComplex(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates the this mathematical expression (complex number).
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Tan.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.Tan.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>The new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="T:xFunc.Maths.Expressions.Trigonometric.TrigonometricExpression">
            <summary>
            The base class for trigonomeric functions. This is an <c>abstract</c> class.
            </summary>
            <seealso cref="T:xFunc.Maths.Expressions.UnaryExpression" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.TrigonometricExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Trigonometric.TrigonometricExpression"/> class.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.TrigonometricExpression.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Trigonometric.TrigonometricExpression"/> class.
            </summary>
            <param name="expression">The argument of function.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.TrigonometricExpression.GetResultType">
            <summary>
            Gets the result type.
            </summary>
            <returns>
            The result type of current expression.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.TrigonometricExpression.ExecuteDergee(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathematical expression (using degree).
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.TrigonometricExpression.ExecuteRadian(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathematical expression (using radian).
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.TrigonometricExpression.ExecuteGradian(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates this mathematical expression (using gradian).
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.TrigonometricExpression.ExecuteComplex(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Calculates the this mathematical expression (complex number).
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Trigonometric.TrigonometricExpression.Execute(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the calculation.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="P:xFunc.Maths.Expressions.Trigonometric.TrigonometricExpression.ArgumentType">
            <summary>
            Gets the type of the argument.
            </summary>
            <value>
            The type of the argument.
            </value>
        </member>
        <member name="T:xFunc.Maths.Expressions.Define">
            <summary>
            Represents the Define operation.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Define.#ctor(xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Define"/> class.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Define.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Define.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Define.ToString(xFunc.Maths.Analyzers.Formatters.IFormatter)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="formatter">The formatter.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Define.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Define.Execute">
            <summary>
            Throws <see cref="T:System.NotSupportedException"/>
            </summary>
            <returns>
            The exception.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Expressions.Define.Execute(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            The exception.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
            <exception cref="T:System.ArgumentNullException"><paramref name="parameters" /> is null.</exception>
        </member>
        <member name="M:xFunc.Maths.Expressions.Define.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Define.Clone">
            <summary>
            Clones this instance of the <see cref="T:xFunc.Maths.Expressions.Define"/>.
            </summary>
            <returns>Returns the new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.Define.Parent">
            <summary>
            Get or Set the parent expression.
            </summary>
        </member>
        <member name="P:xFunc.Maths.Expressions.Define.MinParameters">
            <summary>
            Gets the minimum count of parameters.
            </summary>
            <value>
            The minimum count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Define.MaxParameters">
            <summary>
            Gets the maximum count of parameters. -1 - Infinity.
            </summary>
            <value>
            The maximum count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Define.ParametersCount">
            <summary>
            Gets the count of parameters.
            </summary>
            <value>
            The count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Define.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>The key.</value>
            <exception cref="T:System.NotSupportedException"><paramref name="value"/> is not a <see cref="T:xFunc.Maths.Expressions.Variable"/> or a <see cref="T:xFunc.Maths.Expressions.UserFunction"/>.</exception>
        </member>
        <member name="P:xFunc.Maths.Expressions.Define.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null.</exception>
        </member>
        <member name="P:xFunc.Maths.Expressions.Define.ValueType">
            <summary>
            Gets the type of the value.
            </summary>
            <value>
            The type of the value.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Define.ResultType">
            <summary>
            Gets the type of the result.
            </summary>
            <value>
            The type of the result.
            </value>
            <remarks>
            Usage of this property can affect performance. Don't use this property each time if you need to check result type of current expression. Just store/cache value only once and use it everywhere.
            </remarks>
        </member>
        <member name="T:xFunc.Maths.Expressions.BinaryExpression">
            <summary>
            The base class for binary operations.
            </summary>
        </member>
        <member name="F:xFunc.Maths.Expressions.BinaryExpression.m_left">
            <summary>
            The left (first) operand.
            </summary>
        </member>
        <member name="F:xFunc.Maths.Expressions.BinaryExpression.m_right">
            <summary>
            The right (second) operand.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.BinaryExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.BinaryExpression"/> class.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.BinaryExpression.#ctor(xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.BinaryExpression"/> class.
            </summary>
            <param name="left">The left (first) operand.</param>
            <param name="right">The right (second) operand.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.BinaryExpression.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.BinaryExpression.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.BinaryExpression.GetHashCode(System.Int32,System.Int32)">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <param name="first">The first.</param>
            <param name="second">The second.</param>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.BinaryExpression.ToString(xFunc.Maths.Analyzers.Formatters.IFormatter)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="formatter">The formatter.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.BinaryExpression.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.BinaryExpression.GetResultType">
            <summary>
            Gets the result type.
            </summary>
            <returns>The result type of current expression.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.BinaryExpression.Execute">
            <summary>
            Executes this expression. Don't use this method if your expression has variables or user-functions.
            </summary>
            <returns>
            A result of the execution.
            </returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.BinaryExpression.Left">
            <summary>
            The left (first) operand.
            </summary>
        </member>
        <member name="P:xFunc.Maths.Expressions.BinaryExpression.LeftType">
            <summary>
            Gets the type of the left parameter.
            </summary>
            <value>
            The type of the left parameter.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.BinaryExpression.Right">
            <summary>
            The right (second) operand.
            </summary>
        </member>
        <member name="P:xFunc.Maths.Expressions.BinaryExpression.RightType">
            <summary>
            Gets the type of the right parameter.
            </summary>
            <value>
            The type of the right parameter.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.BinaryExpression.Parent">
            <summary>
            Get or Set the parent expression.
            </summary>
        </member>
        <member name="P:xFunc.Maths.Expressions.BinaryExpression.MinParameters">
            <summary>
            Gets the minimum count of parameters.
            </summary>
            <value>
            The minimum count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.BinaryExpression.MaxParameters">
            <summary>
            Gets the maximum count of parameters. -1 - Infinity.
            </summary>
            <value>
            The maximum count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.BinaryExpression.ParametersCount">
            <summary>
            Gets the count of parameters.
            </summary>
            <value>
            The count of parameters.
            </value>
        </member>
        <member name="T:xFunc.Maths.Expressions.Derivative">
            <summary>
            Represents the Deriv function.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Derivative.#ctor(xFunc.Maths.Expressions.IExpression[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Derivative" /> class.
            </summary>
            <param name="args">The arguments.</param>
            <param name="countOfParams">The count of parameters.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="args"/> is null.</exception>
        </member>
        <member name="M:xFunc.Maths.Expressions.Derivative.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Derivative" /> class.
            </summary>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Derivative.#ctor(xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.Variable)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Derivative" /> class.
            </summary>
            <param name="expression">The expression.</param>
            <param name="variable">The variable.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Derivative.#ctor(xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.Variable,xFunc.Maths.Expressions.Number)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Derivative" /> class.
            </summary>
            <param name="expression">The expression.</param>
            <param name="variable">The variable.</param>
            <param name="point">The point of derivation.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Derivative.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Derivative.Execute(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Derivative.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Derivative.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>Returns the new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.Derivative.Expression">
            <summary>
            Gets or sets the expression.
            </summary>
            <value>
            The expression.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Derivative.Variable">
            <summary>
            Gets or sets the variable.
            </summary>
            <value>
            The variable.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Derivative.DerivativePoint">
            <summary>
            Gets the derivative point.
            </summary>
            <value>
            The derivative point.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Derivative.Arguments">
            <summary>
            Gets or sets the arguments.
            </summary>
            <value>
            The arguments.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Derivative.MinParameters">
            <summary>
            Gets the minimum count of parameters.
            </summary>
            <value>
            The minimum count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Derivative.MaxParameters">
            <summary>
            Gets the maximum count of parameters. -1 - Infinity.
            </summary>
            <value>
            The maximum count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Derivative.ResultType">
            <summary>
            Gets the type of the result.
            </summary>
            <value>
            The type of the result.
            </value>
            <remarks>
            Usage of this property can affect performance. Don't use this property each time if you need to check result type of current expression. Just store/cache value only once and use it everywhere.
            </remarks>
        </member>
        <member name="P:xFunc.Maths.Expressions.Derivative.Simplifier">
            <summary>
            Gets or sets the simplifier.
            </summary>
            <value>
            The simplifier.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Derivative.Differentiator">
            <summary>
            Gets or sets the differentiator.
            </summary>
            <value>
            The differentiator.
            </value>
        </member>
        <member name="T:xFunc.Maths.Expressions.Div">
            <summary>
            Represents the Division operation.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Div.#ctor(xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Div"/> class.
            </summary>
            <param name="left">The first (left) operand.</param>
            <param name="right">The second (right) operand.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Div.GetResultType">
            <summary>
            Gets the result type.
            </summary>
            <returns>
            The result type of current expression.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Div.Execute(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Div.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Div.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Div.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>Returns the new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.Div.LeftType">
            <summary>
            Gets the type of the left parameter.
            </summary>
            <value>
            The type of the left parameter.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Div.RightType">
            <summary>
            Gets the type of the right parameter.
            </summary>
            <value>
            The type of the right parameter.
            </value>
        </member>
        <member name="T:xFunc.Maths.Expressions.Exp">
            <summary>
            Represents the Exponential function.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Exp.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Exp"/> class.
            </summary>
            <param name="expression">The argument of function.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Exp.GetResultType">
            <summary>
            Gets the result type.
            </summary>
            <returns>
            The result type of current expression.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Exp.Execute(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Exp.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Exp.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Exp.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>Returns the new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.Exp.ArgumentType">
            <summary>
            Gets the type of the argument.
            </summary>
            <value>
            The type of the argument.
            </value>
        </member>
        <member name="T:xFunc.Maths.Expressions.Pow">
            <summary>
            Represents the Exponentiation operation.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Pow.#ctor(xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Pow"/> class.
            </summary>
            <param name="base">The base.</param>
            <param name="exponent">The exponent.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Pow.GetResultType">
            <summary>
            Gets the result type.
            </summary>
            <returns>
            The result type of current expression.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Pow.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Pow.Execute(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Returns a specified number raised to the specified power.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A specified number raised to the specified power.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Pow.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Pow.Clone">
            <summary>
            Clones this instance of the <see cref="T:xFunc.Maths.Expressions.Pow"/> class.
            </summary>
            <returns>Returns the new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.Pow.LeftType">
            <summary>
            Gets the type of the left parameter.
            </summary>
            <value>
            The type of the left parameter.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Pow.RightType">
            <summary>
            Gets the type of the right parameter.
            </summary>
            <value>
            The type of the right parameter.
            </value>
        </member>
        <member name="T:xFunc.Maths.Expressions.IExpression">
            <summary>
            Defines methods to work with expressions.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.IExpression.Execute">
            <summary>
            Executes this expression. Don't use this method if your expression has variables or user-functions.
            </summary>
            <returns>A result of the execution.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.IExpression.Execute(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>A result of the execution.</returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.IExpression.ToString(xFunc.Maths.Analyzers.Formatters.IFormatter)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="formatter">The formatter.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.IExpression.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>The analysis result.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.IExpression.Clone">
            <summary>
            Clones this instance of the <see cref="T:xFunc.Maths.Expressions.IExpression"/>.
            </summary>
            <returns>Returns the new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.IExpression.Parent">
            <summary>
            Get or Set the parent expression.
            </summary>
        </member>
        <member name="P:xFunc.Maths.Expressions.IExpression.MinParameters">
            <summary>
            Gets the minimum count of parameters.
            </summary>
            <value>
            The minimum count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.IExpression.MaxParameters">
            <summary>
            Gets the maximum count of parameters. -1 - Infinity.
            </summary>
            <value>
            The maximum count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.IExpression.ParametersCount">
            <summary>
            Gets the count of parameters.
            </summary>
            <value>
            The count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.IExpression.ResultType">
            <summary>
            Gets the type of the result.
            </summary>
            <value>
            The type of the result.
            </value>
            <remarks>
            Usage of this property can affect performance. Don't use this property each time if you need to check result type of current expression. Just store/cache value only once and use it everywhere.
            </remarks>
        </member>
        <member name="T:xFunc.Maths.Expressions.Lg">
            <summary>
            Represents the Common logarithm function.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Lg.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Lg"/> class.
            </summary>
            <param name="expression">The argument of function.</param>
            <seealso cref="T:xFunc.Maths.Expressions.IExpression"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Lg.GetResultType">
            <summary>
            Gets the result type.
            </summary>
            <returns>
            The result type of current expression.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Lg.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Lg.Execute(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this Lg expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Lg.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Lg.Clone">
            <summary>
            Clones this instance of the <see cref="T:xFunc.Maths.Expressions.Lg"/> class.
            </summary>
            <returns>Returns the new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.Lg.ArgumentType">
            <summary>
            Gets the type of the argument.
            </summary>
            <value>
            The type of the argument.
            </value>
        </member>
        <member name="T:xFunc.Maths.Expressions.Ln">
            <summary>
            Represents the Natural logarithm function.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Ln.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Ln"/> class.
            </summary>
            <param name="expression">The argument of function.</param>
            <seealso cref="T:xFunc.Maths.Expressions.IExpression"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Ln.GetResultType">
            <summary>
            Gets the result type.
            </summary>
            <returns>
            The result type of current expression.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Ln.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Ln.Execute(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this Ln expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Ln.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Ln.Clone">
            <summary>
            Clones this instance of the <see cref="T:xFunc.Maths.Expressions.Ln"/>.
            </summary>
            <returns>Returns the new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.Ln.ArgumentType">
            <summary>
            Gets the type of the argument.
            </summary>
            <value>
            The type of the argument.
            </value>
        </member>
        <member name="T:xFunc.Maths.Expressions.Log">
            <summary>
            Represents the Logarithm function.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Log.#ctor(xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Log"/> class.
            </summary>
            <param name="arg">The left operand.</param>
            <param name="base">The right operand.</param>
            <seealso cref="T:xFunc.Maths.Expressions.IExpression"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Log.GetResultType">
            <summary>
            Gets the result type.
            </summary>
            <returns>
            The result type of current expression.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Log.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Log.Execute(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this Log expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Log.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Log.Clone">
            <summary>
            Clones this instance of the <see cref="T:xFunc.Maths.Expressions.Log"/>.
            </summary>
            <returns>Returns the new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.Log.RightType">
            <summary>
            Gets the type of the right parameter.
            </summary>
            <value>
            The type of the right parameter.
            </value>
        </member>
        <member name="T:xFunc.Maths.Expressions.Mul">
            <summary>
            Represents the Multiplication operation.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Mul.#ctor(xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Mul"/> class.
            </summary>
            <param name="left">The first (left) operand.</param>
            <param name="right">The second (right) operand.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Mul.GetResultType">
            <summary>
            Gets the result type.
            </summary>
            <returns>
            The result type of current expression.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Mul.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Mul.Execute(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <exception cref="T:System.NotSupportedException">The multiplication of two vectors is not allowed.</exception>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Mul.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Mul.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>Returns the new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.Mul.LeftType">
            <summary>
            Gets the type of the left parameter.
            </summary>
            <value>
            The type of the left parameter.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Mul.RightType">
            <summary>
            Gets the type of the right parameter.
            </summary>
            <value>
            The type of the right parameter.
            </value>
        </member>
        <member name="T:xFunc.Maths.Expressions.Number">
            <summary>
            Represents the Number operation.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Number.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Number"/> class.
            </summary>
            <param name="number">A number.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Number.op_Implicit(xFunc.Maths.Expressions.Number)~System.Double">
            <summary>
            Defines an implicit conversion of a <see cref="T:xFunc.Maths.Expressions.Number"/> to a double value.
            </summary>
            <param name="number">The value to convert to a double.</param>
            <returns>An object that contains the value of the <paramref name="number"/> parameter.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Number.op_Implicit(System.Double)~xFunc.Maths.Expressions.Number">
            <summary>
            Defines an implicit conversion of double to <see cref="T:xFunc.Maths.Expressions.Number"/>.
            </summary>
            <param name="number">The value to convert to <see cref="T:xFunc.Maths.Expressions.Number"/>.</param>
            <returns>An object that contains the value of the <paramref name="number"/> parameter.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Number.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><c>true</c> if the specified object is equal to the current object; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Number.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Number.ToString(xFunc.Maths.Analyzers.Formatters.IFormatter)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="formatter">The formatter.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Number.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Number.Execute">
            <summary>
            Returns a number. Don't use this method if your expression has variables.
            </summary>
            <returns>A result of the execution.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Number.Execute(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Returns a number.
            </summary>
            <param name="parameters">A collection of variables.</param>
            <returns>A result of the execution.</returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Number.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Number.Clone">
            <summary>
            Clones this instance of the <see cref="T:xFunc.Maths.Expressions.Number"/> class.
            </summary>
            <returns>Returns the new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.Number.Value">
            <summary>
            Gets or Sets a number.
            </summary>
        </member>
        <member name="P:xFunc.Maths.Expressions.Number.Parent">
            <summary>
            Get or Set the parent expression.
            </summary>
        </member>
        <member name="P:xFunc.Maths.Expressions.Number.MinParameters">
            <summary>
            Gets the minimum count of parameters. 
            </summary>
            <value>
            The minimum count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Number.MaxParameters">
            <summary>
            Gets the maximum count of parameters. -1 - Infinity.
            </summary>
            <value>
            The maximum count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Number.ParametersCount">
            <summary>
            Gets the count of parameters.
            </summary>
            <value>
            The count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Number.ResultType">
            <summary>
            Gets the type of the result.
            </summary>
            <value>
            The type of the result.
            </value>
            <remarks>
            Usage of this property can affect performance. Don't use this property each time if you need to check result type of current expression. Just store/cache value only once and use it everywhere.
            </remarks>
        </member>
        <member name="T:xFunc.Maths.Expressions.Root">
            <summary>
            Represents the nth root operation.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Root.#ctor(xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Root"/> class.
            </summary>
            <param name="radicand">The radicand.</param>
            <param name="degree">The degree.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Root.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Root.Execute(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Root.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Root.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>Returns the new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="T:xFunc.Maths.Expressions.Sqrt">
            <summary>
            Represents the Square Root function.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Sqrt.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Sqrt"/> class.
            </summary>
            <param name="expression">The argument of the function.</param>
            <seealso cref="T:xFunc.Maths.Expressions.IExpression"/>
        </member>
        <member name="M:xFunc.Maths.Expressions.Sqrt.GetResultType">
            <summary>
            Gets the result type.
            </summary>
            <returns>
            The result type of current expression.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Sqrt.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Sqrt.Execute(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Sqrt.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Sqrt.Clone">
            <summary>
            Clones this instance of the <see cref="T:xFunc.Maths.Expressions.Sqrt"/> class.
            </summary>
            <returns>Returns the new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.Sqrt.ArgumentType">
            <summary>
            Gets the type of the argument.
            </summary>
            <value>
            The type of the argument.
            </value>
        </member>
        <member name="T:xFunc.Maths.Expressions.Sub">
            <summary>
            Represents the Subtraction operation.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Sub.#ctor(xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Sub"/> class.
            </summary>
            <param name="left">The minuend.</param>
            <param name="right">The subtrahend.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Sub.GetResultType">
            <summary>
            Gets the result type.
            </summary>
            <returns>
            The result type of current expression.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Sub.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Sub.Execute(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.Sub.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Sub.Clone">
            <summary>
            Clones this instance of the <see cref="T:xFunc.Maths.Expressions.Sub"/> class.
            </summary>
            <returns>Returns the new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.Sub.LeftType">
            <summary>
            Gets the type of the left parameter.
            </summary>
            <value>
            The type of the left parameter.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Sub.RightType">
            <summary>
            Gets the type of the right parameter.
            </summary>
            <value>
            The type of the right parameter.
            </value>
        </member>
        <member name="T:xFunc.Maths.Expressions.UnaryExpression">
            <summary>
            The abstract base class that represents the unary operation.
            </summary>
        </member>
        <member name="F:xFunc.Maths.Expressions.UnaryExpression.m_argument">
            <summary>
            The (first) operand.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.UnaryExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.UnaryExpression"/> class.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.UnaryExpression.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.UnaryExpression"/> class.
            </summary>
            <param name="argument">The expression.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.UnaryExpression.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.UnaryExpression.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.UnaryExpression.GetHashCode(System.Int32)">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <param name="first">The first.</param>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.UnaryExpression.ToString(xFunc.Maths.Analyzers.Formatters.IFormatter)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="formatter">The formatter.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.UnaryExpression.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.UnaryExpression.GetResultType">
            <summary>
            Gets the result type.
            </summary>
            <returns>
            The result type of current expression.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.UnaryExpression.Execute">
            <summary>
            Executes this expression. Don't use this method if your expression has variables or user-functions.
            </summary>
            <returns>
            A result of the execution.
            </returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.UnaryExpression.Argument">
            <summary>
            Gets or sets the expression.
            </summary>
            <value>The expression.</value>
        </member>
        <member name="P:xFunc.Maths.Expressions.UnaryExpression.ArgumentType">
            <summary>
            Gets the type of the argument.
            </summary>
            <value>
            The type of the argument.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.UnaryExpression.Parent">
            <summary>
            Get or Set the parent expression.
            </summary>
        </member>
        <member name="P:xFunc.Maths.Expressions.UnaryExpression.MinParameters">
            <summary>
            Gets the minimum count of parameters.
            </summary>
            <value>
            The minimum count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.UnaryExpression.MaxParameters">
            <summary>
            Gets the maximum count of parameters. -1 - Infinity.
            </summary>
            <value>
            The maximum count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.UnaryExpression.ParametersCount">
            <summary>
            Gets the count of parameters.
            </summary>
            <value>
            The count of parameters.
            </value>
        </member>
        <member name="T:xFunc.Maths.Expressions.UnaryMinus">
            <summary>
            Represents the unary minus.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.UnaryMinus.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.UnaryMinus"/> class.
            </summary>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.UnaryMinus.GetResultType">
            <summary>
            Gets the result type.
            </summary>
            <returns>
            The result type of current expression.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.UnaryMinus.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.UnaryMinus.Execute(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.UnaryMinus.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.UnaryMinus.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>Returns the new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.UnaryMinus.ArgumentType">
            <summary>
            Gets the type of the argument.
            </summary>
            <value>
            The type of the argument.
            </value>
        </member>
        <member name="T:xFunc.Maths.Expressions.Undefine">
            <summary>
            Represents the Undefice operation.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Undefine.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Undefine"/> class.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Undefine.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Undefine.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Undefine.ToString(xFunc.Maths.Analyzers.Formatters.IFormatter)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="formatter">The formatter.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Undefine.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Undefine.Execute">
            <summary>
            Executes this expression. Don't use this method if your expression has variables or functions.
            </summary>
            <returns>
            A result of the execution.
            </returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Expressions.Undefine.Execute(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes this expression.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
            <exception cref="T:System.ArgumentNullException"><paramref name="parameters"/> is null.</exception>
        </member>
        <member name="M:xFunc.Maths.Expressions.Undefine.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Undefine.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>Returns the new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.Undefine.Parent">
            <summary>
            Get or Set the parent expression.
            </summary>
        </member>
        <member name="P:xFunc.Maths.Expressions.Undefine.MinParameters">
            <summary>
            Gets the minimum count of parameters. -1 - Infinity.
            </summary>
            <value>
            The minimum count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Undefine.MaxParameters">
            <summary>
            Gets the maximum count of parameters. -1 - Infinity.
            </summary>
            <value>
            The maximum count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Undefine.ParametersCount">
            <summary>
            Gets the count of parameters.
            </summary>
            <value>
            The count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Undefine.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>The key.</value>
            <exception cref="T:System.NotSupportedException"><paramref name="value"/> is not a <see cref="T:xFunc.Maths.Expressions.Variable"/> or a <see cref="T:xFunc.Maths.Expressions.UserFunction"/>.</exception>
        </member>
        <member name="P:xFunc.Maths.Expressions.Undefine.ResultType">
            <summary>
            Gets the type of the result.
            </summary>
            <value>
            The type of the result.
            </value>
            <remarks>
            Usage of this property can affect performance. Don't use this property each time if you need to check result type of current expression. Just store/cache value only once and use it everywhere.
            </remarks>
        </member>
        <member name="T:xFunc.Maths.Expressions.UserFunction">
            <summary>
            Represents user-defined functions.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.UserFunction.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.UserFunction"/> class.
            </summary>
            <param name="function">The name of function.</param>
            <param name="countOfParams">The count of parameters.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.UserFunction.#ctor(System.String,xFunc.Maths.Expressions.IExpression[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.UserFunction"/> class.
            </summary>
            <param name="function">The name of function.</param>
            <param name="args">Arguments.</param>
            <param name="countOfParams">The count of parameters.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.UserFunction.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.UserFunction.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.UserFunction.Execute(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Executes the user function.
            </summary>
            <param name="parameters">An object that contains all parameters and functions for expressions.</param>
            <returns>
            A result of the execution.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="parameters"/> is null.</exception>
            <seealso cref="T:xFunc.Maths.Expressions.ExpressionParameters" />
        </member>
        <member name="M:xFunc.Maths.Expressions.UserFunction.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.UserFunction.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>Returns the new instance of <see cref="T:xFunc.Maths.Expressions.IExpression"/> that is a clone of this instance.</returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.UserFunction.Function">
            <summary>
            Gets the name of function.
            </summary>
            <value>The name of function.</value>
        </member>
        <member name="P:xFunc.Maths.Expressions.UserFunction.MinParameters">
            <summary>
            Gets the minimum count of parameters. -1 - Infinity.
            </summary>
            <value>
            The minimum count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.UserFunction.MaxParameters">
            <summary>
            Gets the maximum count of parameters. -1 - Infinity.
            </summary>
            <value>
            The maximum count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.UserFunction.ResultType">
            <summary>
            Gets the type of the result.
            </summary>
            <value>
            The type of the result.
            </value>
            <remarks>
            Usage of this property can affect performance. Don't use this property each time if you need to check result type of current expression. Just store/cache value only once and use it everywhere.
            </remarks>
        </member>
        <member name="T:xFunc.Maths.Expressions.Variable">
            <summary>
            Represents variables in expressions.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Expressions.Variable.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Expressions.Variable"/> class.
            </summary>
            <param name="name">A name of variable.</param>
        </member>
        <member name="M:xFunc.Maths.Expressions.Variable.op_Implicit(xFunc.Maths.Expressions.Variable)~System.String">
            <summary>
            Defines an implicit conversion of a Variable object to a string object.
            </summary>
            <param name="variable">The value to convert.</param>
            <returns>An object that contains the converted value.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Variable.op_Implicit(System.String)~xFunc.Maths.Expressions.Variable">
            <summary>
            Defines an implicit conversion of a string object to a Variable object.
            </summary>
            <param name="variable">The value to convert.</param>
            <returns>An object that contains the converted value.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Variable.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Variable.GetHashCode">
            <summary>
            Returns a hash function for this type.
            </summary>
            <returns>A hash code for the current <see cref="T:xFunc.Maths.Expressions.Variable"/>.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Variable.ToString(xFunc.Maths.Analyzers.Formatters.IFormatter)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="formatter">The formatter.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Variable.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Variable.Execute">
            <summary>
            Do not use this method. It always throws an exception.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:xFunc.Maths.Expressions.Variable.Execute(xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Gets value of this variable from <paramref name="parameters"/>.
            </summary>
            <param name="parameters">Collection of variables.</param>
            <returns>A value of this variable.</returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Variable.Analyze``1(xFunc.Maths.Analyzers.IAnalyzer{``0})">
            <summary>
            Analyzes the current expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>
            The analysis result.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Expressions.Variable.Clone">
            <summary>
            Clones this instance of the <see cref="T:xFunc.Maths.Expressions.Variable"/>.
            </summary>
            <returns>Returns the new instance of <see cref="T:xFunc.Maths.Expressions.Variable"/> that is a clone of this instance.</returns>
        </member>
        <member name="P:xFunc.Maths.Expressions.Variable.Name">
            <summary>
            A name of this variable.
            </summary>
        </member>
        <member name="P:xFunc.Maths.Expressions.Variable.Parent">
            <summary>
            Get or Set the parent expression.
            </summary>
        </member>
        <member name="P:xFunc.Maths.Expressions.Variable.MinParameters">
            <summary>
            Gets the minimum count of parameters. -1 - Infinity.
            </summary>
            <value>
            The minimum count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Variable.MaxParameters">
            <summary>
            Gets the maximum count of parameters. -1 - Infinity.
            </summary>
            <value>
            The maximum count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Variable.ParametersCount">
            <summary>
            Gets the count of parameters.
            </summary>
            <value>
            The count of parameters.
            </value>
        </member>
        <member name="P:xFunc.Maths.Expressions.Variable.ResultType">
            <summary>
            Gets the type of the result.
            </summary>
            <value>
            The type of the result.
            </value>
            <remarks>
            Usage of this property can affect performance. Don't use this property each time if you need to check result type of current expression. Just store/cache value only once and use it everywhere.
            </remarks>
        </member>
        <member name="T:xFunc.Maths.ComplexExtensions">
            <summary>
            Trigonometric functions for Complex numbers.
            </summary>
        </member>
        <member name="M:xFunc.Maths.ComplexExtensions.Cot(System.Numerics.Complex)">
            <summary>
            Returns the cotangent of the specified complex number.
            </summary>
            <param name="number">Complex number.</param>
            <returns>Cotangent of complex number.</returns>
        </member>
        <member name="M:xFunc.Maths.ComplexExtensions.Sec(System.Numerics.Complex)">
            <summary>
            Returns the secant of the specified complex number.
            </summary>
            <param name="number">Complex number.</param>
            <returns>Secant of complex number.</returns>
        </member>
        <member name="M:xFunc.Maths.ComplexExtensions.Csc(System.Numerics.Complex)">
            <summary>
            Returns the cosecant of the specified complex number.
            </summary>
            <param name="number">Complex number.</param>
            <returns>Cosecant of complex number.</returns>
        </member>
        <member name="M:xFunc.Maths.ComplexExtensions.Acot(System.Numerics.Complex)">
            <summary>
            Returns the arccotangent of the specified complex number.
            </summary>
            <param name="number">Complex number.</param>
            <returns>Arccotangent of complex number.</returns>
        </member>
        <member name="M:xFunc.Maths.ComplexExtensions.Asec(System.Numerics.Complex)">
            <summary>
            Returns the arcosecant of the specified complex number.
            </summary>
            <param name="number">Complex number.</param>
            <returns>Arcosecant of complex number.</returns>
        </member>
        <member name="M:xFunc.Maths.ComplexExtensions.Acsc(System.Numerics.Complex)">
            <summary>
            Returns the arcosecant of the specified complex number.
            </summary>
            <param name="number">Complex number.</param>
            <returns>Arcosecant of complex number.</returns>
        </member>
        <member name="M:xFunc.Maths.ComplexExtensions.Coth(System.Numerics.Complex)">
            <summary>
            Returns the hyperbolic cotangent of the specified complex number.
            </summary>
            <param name="number">Complex number.</param>
            <returns>Hyperbolic cotangent of complex number.</returns>
        </member>
        <member name="M:xFunc.Maths.ComplexExtensions.Sech(System.Numerics.Complex)">
            <summary>
            Returns the hyperbolic secant of the specified complex number.
            </summary>
            <param name="number">Complex number.</param>
            <returns>Hyperbolic secant of complex number.</returns>
        </member>
        <member name="M:xFunc.Maths.ComplexExtensions.Csch(System.Numerics.Complex)">
            <summary>
            Returns the hyperbolic cosecant of the specified complex number.
            </summary>
            <param name="number">Complex number.</param>
            <returns>Hyperbolic cosecant of complex number.</returns>
        </member>
        <member name="M:xFunc.Maths.ComplexExtensions.Asinh(System.Numerics.Complex)">
            <summary>
            Returns the hyperbolic arsine of the specified complex number.
            </summary>
            <param name="number">Complex number.</param>
            <returns>Hyperbolic arsine of complex number.</returns>
        </member>
        <member name="M:xFunc.Maths.ComplexExtensions.Acosh(System.Numerics.Complex)">
            <summary>
            Returns the hyperbolic arcosine of the specified complex number.
            </summary>
            <param name="number">Complex number.</param>
            <returns>Hyperbolic arcosine of complex number.</returns>
        </member>
        <member name="M:xFunc.Maths.ComplexExtensions.Atanh(System.Numerics.Complex)">
            <summary>
            Returns the hyperbolic artangent of the specified complex number.
            </summary>
            <param name="number">Complex number.</param>
            <returns>Hyperbolic arctangent of complex number.</returns>
        </member>
        <member name="M:xFunc.Maths.ComplexExtensions.Acoth(System.Numerics.Complex)">
            <summary>
            Returns the hyperbolic arcotangent of the specified complex number.
            </summary>
            <param name="number">Complex number.</param>
            <returns>Hyperbolic arcoctangent of complex number.</returns>
        </member>
        <member name="M:xFunc.Maths.ComplexExtensions.Asech(System.Numerics.Complex)">
            <summary>
            Returns the hyperbolic arsecant of the specified complex number.
            </summary>
            <param name="number">Complex number.</param>
            <returns>Hyperbolic arsecant of complex number.</returns>
        </member>
        <member name="M:xFunc.Maths.ComplexExtensions.Acsch(System.Numerics.Complex)">
            <summary>
            Returns the hyperbolic arcosecant of the specified complex number.
            </summary>
            <param name="number">Complex number.</param>
            <returns>Hyperbolic arcosecant of complex number.</returns>
        </member>
        <member name="T:xFunc.Maths.Helpers">
            <summary>
            The helper class with additional methods.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Helpers.HasVariable(xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.Variable)">
            <summary>
            Checks that <paramref name="expression"/> has  the <paramref name="arg"/> variable.
            </summary>
            <param name="expression">The expression that is checked.</param>
            <param name="arg">The variable that can be contained in the expression.</param>
            <returns>true if <paramref name="expression"/> has <paramref name="arg"/>; otherwise, false.</returns>
        </member>
        <member name="M:xFunc.Maths.Helpers.GetParameters(System.Collections.Generic.IEnumerable{xFunc.Maths.Tokens.IToken})">
            <summary>
            Gets parameters of expression.
            </summary>
            <param name="tokens">The list of tokens.</param>
            <returns>A collection of parameters.</returns>
        </member>
        <member name="M:xFunc.Maths.Helpers.ConvertExpressionToCollection(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Converts the logic expression to collection.
            </summary>
            <param name="expression">The expression.</param>
            <returns>The collection of expression parts.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="expression"/> variable is null.</exception>
        </member>
        <member name="M:xFunc.Maths.Helpers.GetAllVariables(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Gets all variables.
            </summary>
            <param name="expression">The expression.</param>
            <returns>The list of variables.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="expression"/> is null.</exception>
        </member>
        <member name="T:xFunc.Maths.IDependencyResolver">
            <summary>
            Defines methods to resolve object (supports only property resolution on existing objects) for post parse process.
            </summary>
        </member>
        <member name="M:xFunc.Maths.IDependencyResolver.Resolve(System.Object)">
            <summary>
            Resolves the specified object.
            </summary>
            <param name="obj">The object.</param>
        </member>
        <member name="M:xFunc.Maths.IDependencyResolver.Resolve``1(``0)">
            <summary>
            Resolves the specified object.
            </summary>
            <typeparam name="T">The type of specified object.</typeparam>
            <param name="obj">The object.</param>
            <returns>The object with injected properties.</returns>
        </member>
        <member name="T:xFunc.Maths.IExpressionFactory">
            <summary>
            Factory of expressions.
            </summary>
        </member>
        <member name="M:xFunc.Maths.IExpressionFactory.Create(xFunc.Maths.Tokens.IToken)">
            <summary>
            Creates a expression from specified token.
            </summary>
            <param name="token">The token.</param>
            <returns>The expression.</returns>
        </member>
        <member name="T:xFunc.Maths.InvalidResultException">
            <summary>
            Throws when a result is invalid.
            </summary>
        </member>
        <member name="M:xFunc.Maths.InvalidResultException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.InvalidResultException"/> class.
            </summary>
        </member>
        <member name="M:xFunc.Maths.InvalidResultException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.InvalidResultException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:xFunc.Maths.InvalidResultException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.InvalidResultException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="M:xFunc.Maths.InvalidResultException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.InvalidResultException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:xFunc.Maths.IParser">
            <summary>
            The interface for parser.
            </summary>
        </member>
        <member name="M:xFunc.Maths.IParser.Parse(System.Collections.Generic.IEnumerable{xFunc.Maths.Tokens.IToken})">
            <summary>
            Parses the specified function.
            </summary>
            <param name="tokens">The list of tokens.</param>
            <returns>The parsed expression.</returns>
        </member>
        <member name="T:xFunc.Maths.ExpressionFactory">
            <summary>
            Factory of mathematic expressions.
            </summary>
        </member>
        <member name="M:xFunc.Maths.ExpressionFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.ExpressionFactory"/> class.
            </summary>
        </member>
        <member name="M:xFunc.Maths.ExpressionFactory.#ctor(xFunc.Maths.IDependencyResolver)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.ExpressionFactory"/> class.
            </summary>
            <param name="resolver">The dependency resolver.</param>
        </member>
        <member name="M:xFunc.Maths.ExpressionFactory.Create(xFunc.Maths.Tokens.IToken)">
            <summary>
            Creates a expression from specified token.
            </summary>
            <param name="token">The token.</param>
            <returns>
            The expression.
            </returns>
        </member>
        <member name="M:xFunc.Maths.ExpressionFactory.CreateOperation(xFunc.Maths.Tokens.OperationToken)">
            <summary>
            Creates an expression object from <see cref="T:xFunc.Maths.Tokens.OperationToken"/>.
            </summary>
            <param name="token">The operation token.</param>
            <returns>An expression.</returns>
        </member>
        <member name="M:xFunc.Maths.ExpressionFactory.CreateFunction(xFunc.Maths.Tokens.FunctionToken)">
            <summary>
            Creates an expression object from <see cref="T:xFunc.Maths.Tokens.FunctionToken"/>.
            </summary>
            <param name="token">The function token.</param>
            <returns>An expression.</returns>
        </member>
        <member name="M:xFunc.Maths.ExpressionFactory.CreateUserFunction(xFunc.Maths.Tokens.UserFunctionToken)">
            <summary>
            Creates an expression object from <see cref="T:xFunc.Maths.Tokens.UserFunctionToken"/>.
            </summary>
            <param name="token">The user-function token.</param>
            <returns>An expression.</returns>
        </member>
        <member name="T:xFunc.Maths.LexerException">
            <summary>
            The exception that is thrown in <see cref="T:xFunc.Maths.Lexer"/>.
            </summary>
        </member>
        <member name="M:xFunc.Maths.LexerException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.LexerException"/> class.
            </summary>
        </member>
        <member name="M:xFunc.Maths.LexerException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.LexerException"/> class with a specified error message.
            </summary>
            <param name="message">A <see cref="T:System.String"/> that describes the error.</param>
        </member>
        <member name="M:xFunc.Maths.LexerException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.LexerException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">A <see cref="T:System.String"/> that describes the error.</param>
            <param name="inner">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:xFunc.Maths.LexerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.LexerException"/> class with serialized data.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:xFunc.Maths.ParserException">
            <summary>
            The exception that is thrown in <see cref="T:xFunc.Maths.Parser"/>.
            </summary>
        </member>
        <member name="M:xFunc.Maths.ParserException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.ParserException"/> class.
            </summary>
        </member>
        <member name="M:xFunc.Maths.ParserException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.ParserException"/> class with a specified error message.
            </summary>
            <param name="message">A <see cref="T:System.String"/> that describes the error.</param>
        </member>
        <member name="M:xFunc.Maths.ParserException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.ParserException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">A <see cref="T:System.String"/> that describes the error.</param>
            <param name="inner">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:xFunc.Maths.ParserException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.ParserException"/> class with serialized data.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:xFunc.Maths.ILexer">
            <summary>
            The interface for lexer.
            </summary>
        </member>
        <member name="M:xFunc.Maths.ILexer.Tokenize(System.String)">
            <summary>
            Converts the string into a sequence of tokens.
            </summary>
            <param name="function">The string that contains the functions and operators.</param>
            <returns>The sequence of tokens.</returns>
        </member>
        <member name="T:xFunc.Maths.MathExtensions">
            <summary>
            Provides static methods for additional functions.
            </summary>
        </member>
        <member name="M:xFunc.Maths.MathExtensions.Pow(System.Double,System.Double)">
            <summary>
            Returns a specified number raised to the specified power.
            </summary>
            <param name="number">A double-precision floating-point number to be raised to a power.</param>
            <param name="power">A double-precision floating-point number that specifies a power.</param>
            <returns>The <paramref name="number"/> raised to the <paramref name="power"/>.</returns>
        </member>
        <member name="M:xFunc.Maths.MathExtensions.Cot(System.Double)">
            <summary>
            Returns the cotangent of the specified angle.
            </summary>
            <param name="d">An angle, measured in radians.</param>
            <returns>The cotangent of d.</returns>
        </member>
        <member name="M:xFunc.Maths.MathExtensions.Coth(System.Double)">
            <summary>
            Returns the hyperbolic cotangent of the specified angle.
            </summary>
            <param name="d">An angle, measured in radians.</param>
            <returns>The hyperbolic cotangent of value.</returns>
        </member>
        <member name="M:xFunc.Maths.MathExtensions.Sec(System.Double)">
            <summary>
            Returns the secant of the specified angle.
            </summary>
            <param name="d">An angle, measured in radians.</param>
            <returns>The secant of d.</returns>
        </member>
        <member name="M:xFunc.Maths.MathExtensions.Sech(System.Double)">
            <summary>
            Returns the hyperbolic secant of the specified angle.
            </summary>
            <param name="d">An angle, measured in radians.</param>
            <returns>The hyperbolic secant of value.</returns>
        </member>
        <member name="M:xFunc.Maths.MathExtensions.Csc(System.Double)">
            <summary>
            Returns the cosecant of the specified angle.
            </summary>
            <param name="d">An angle, measured in radians.</param>
            <returns>The cosecant of d.</returns>
        </member>
        <member name="M:xFunc.Maths.MathExtensions.Csch(System.Double)">
            <summary>
            Returns the hyperbolic cosecant of the specified angle.
            </summary>
            <param name="d">An angle, measured in radians.</param>
            <returns>The hyperbolic cosecant of value.</returns>
        </member>
        <member name="M:xFunc.Maths.MathExtensions.Asinh(System.Double)">
            <summary>
            Returns the angle whose hyperbolic sine is the specified number.
            </summary>
            <param name="d">A number representing a hyperbolic sine.</param>
            <returns>An angle, measured in radians.</returns>
        </member>
        <member name="M:xFunc.Maths.MathExtensions.Acosh(System.Double)">
            <summary>
            Returns the angle whose hyperbolic cosine is the specified number.
            </summary>
            <param name="d">A number representing a hyperbolic cosine.</param>
            <returns>An angle, measured in radians.</returns>
        </member>
        <member name="M:xFunc.Maths.MathExtensions.Atanh(System.Double)">
            <summary>
            Returns the angle whose hyperbolic tangent is the specified number.
            </summary>
            <param name="d">A number representing a hyperbolic tangent.</param>
            <returns>An angle, measured in radians.</returns>
        </member>
        <member name="M:xFunc.Maths.MathExtensions.Acot(System.Double)">
            <summary>
            Returns the angle whose cotangent is the specified number.
            </summary>
            <param name="d">A number representing a cotangent.</param>
            <returns>An angle, measured in radians.</returns>
        </member>
        <member name="M:xFunc.Maths.MathExtensions.Acoth(System.Double)">
            <summary>
            Returns the angle whose hyperbolic cotangent is the specified number.
            </summary>
            <param name="d">A number representing a hyperbolic cotangent.</param>
            <returns>An angle, measured in radians.</returns>
        </member>
        <member name="M:xFunc.Maths.MathExtensions.Asec(System.Double)">
            <summary>
            Returns the angle whose secant is the specified number.
            </summary>
            <param name="d">A number representing a secant.</param>
            <returns>An angle, measured in radians.</returns>
        </member>
        <member name="M:xFunc.Maths.MathExtensions.Asech(System.Double)">
            <summary>
            Returns the angle whose hyperbolic secant is the specified number.
            </summary>
            <param name="d">A number representing a hyperbolic secant.</param>
            <returns>An angle, measured in radians.</returns>
        </member>
        <member name="M:xFunc.Maths.MathExtensions.Acsc(System.Double)">
            <summary>
            Returns the angle whose cosecant is the specified number.
            </summary>
            <param name="d">A number representing a hyperbolic cosecant.</param>
            <returns>An angle, measured in radians.</returns>
        </member>
        <member name="M:xFunc.Maths.MathExtensions.Acsch(System.Double)">
            <summary>
            Returns the angle whose hyperbolic cosecant is the specified number.
            </summary>
            <param name="d">A number representing a hyperbolic cosecant.</param>
            <returns>An angle, measured in radians.</returns>
        </member>
        <member name="M:xFunc.Maths.MathExtensions.GCD(System.Double,System.Double)">
            <summary>
            Computes the greatest common divisor.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns>The greatest common divisor.</returns>
        </member>
        <member name="M:xFunc.Maths.MathExtensions.GCD(System.Double[])">
            <summary>
            Computes the polynomial greatest common divisor.
            </summary>
            <param name="numbers">The numbers.</param>
            <returns>The greatest common divisor.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="numbers"/> is null.</exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:xFunc.Maths.MathExtensions.LCM(System.Double,System.Double)">
            <summary>
            Computes the least common multiple.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns>The least common multiple.</returns>
        </member>
        <member name="M:xFunc.Maths.MathExtensions.LCM(System.Double[])">
            <summary>
            Computes the polynomial least common multiple.
            </summary>
            <param name="numbers">The numbers.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="numbers"/> is null.</exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:xFunc.Maths.MathExtensions.ToNewBase(System.Int32,xFunc.Maths.NumeralSystem)">
            <summary>
            Converts <paramref name="number"/> to the new numeral system.
            </summary>
            <param name="number">The number.</param>
            <param name="numeralSystem">The numeral system.</param>
            <returns>String that contains the number in the new numeral system.</returns>
        </member>
        <member name="M:xFunc.Maths.MathExtensions.Fact(System.Double)">
            <summary>
            Computes the factorial.
            </summary>
            <param name="n">An argument.</param>
            <returns></returns>
        </member>
        <member name="T:xFunc.Maths.Lexer">
            <summary>
            The lexer for mathematical expressions.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Lexer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Lexer"/> class.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Lexer.CreateSymbol(System.String,System.Collections.Generic.IList{xFunc.Maths.Tokens.IToken})">
            <summary>
            Creates the symbol token from matched string.
            </summary>
            <param name="match">The matched string.</param>
            <param name="tokens">The list of tokens.</param>
            <exception cref="T:xFunc.Maths.LexerException">
            The specified symbol is not supported.
            </exception>
        </member>
        <member name="M:xFunc.Maths.Lexer.CreateOperations(System.String,System.Collections.Generic.IList{xFunc.Maths.Tokens.IToken})">
            <summary>
            Creates the operation token from matched string.
            </summary>
            <param name="match">The matched string.</param>
            <param name="tokens">The list of tokens.</param>
            <exception cref="T:xFunc.Maths.LexerException">
            The specified operation is not supported.
            </exception>
        </member>
        <member name="M:xFunc.Maths.Lexer.CreateFunction(System.String,System.Collections.Generic.IList{xFunc.Maths.Tokens.IToken})">
            <summary>
            Creates the function token from matched string.
            </summary>
            <param name="match">The matched string.</param>
            <param name="tokens">The list of tokens.</param>
        </member>
        <member name="M:xFunc.Maths.Lexer.CreateConst(System.String,System.Collections.Generic.IList{xFunc.Maths.Tokens.IToken})">
            <summary>
            Creates the constant token from matched string.
            </summary>
            <param name="match">The matched string.</param>
            <param name="tokens">The list of tokens.</param>
            <exception cref="T:xFunc.Maths.LexerException">
            The specified constant is not supported.
            </exception>
        </member>
        <member name="M:xFunc.Maths.Lexer.IsBalanced(System.String)">
            <summary>
            Determines whether brackets in the specified string is balanced.
            </summary>
            <param name="str">The string.</param>
            <returns>
              <c>true</c> if the specified string is balanced; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Lexer.Tokenize(System.String)">
            <summary>
            Converts the string into a sequence of tokens.
            </summary>
            <param name="function">The string that contains the functions and operators.</param>
            <returns>The sequence of tokens.</returns>
            <seealso cref="T:xFunc.Maths.Tokens.IToken"/>
            <exception cref="T:System.ArgumentNullException">Throws when the <paramref name="function"/> parameter is null or empty.</exception>
            <exception cref="T:xFunc.Maths.LexerException">Throws when <paramref name="function"/> has the not supported symbol.</exception>
        </member>
        <member name="M:xFunc.Maths.Lexer.CountParams(System.Collections.Generic.List{xFunc.Maths.Tokens.IToken})">
            <summary>
            Calculates the number of parametes of functions.
            </summary>
            <param name="tokens">The list of tokens.</param>
            <returns>The list of tokens.</returns>
        </member>
        <member name="T:xFunc.Maths.Parser">
            <summary>
            The parser for mathematical expressions.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Parser.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Parser"/> class with default implementations of <see cref="T:xFunc.Maths.IExpressionFactory"/>.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Parser.#ctor(xFunc.Maths.IExpressionFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Parser" /> class.
            </summary>
            <param name="factory">The factory.</param>
        </member>
        <member name="M:xFunc.Maths.Parser.Parse(System.Collections.Generic.IEnumerable{xFunc.Maths.Tokens.IToken})">
            <summary>
            Parses the specified function.
            </summary>
            <param name="tokens">The list of tokens.</param>
            <returns>The parsed expression.</returns>
        </member>
        <member name="P:xFunc.Maths.Parser.ExpressionFactory">
            <summary>
            Gets or sets the expression factory.
            </summary>
            <value>
            The expression factory.
            </value>
        </member>
        <member name="T:xFunc.Maths.Processor">
            <summary>
            The main point of this library. Bring together all features.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Processor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Processor"/> class.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Processor.#ctor(xFunc.Maths.ILexer,xFunc.Maths.IParser,xFunc.Maths.Analyzers.ISimplifier,xFunc.Maths.Analyzers.IDifferentiator)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Processor"/> class.
            </summary>
            <param name="lexer">The lexer.</param>
            <param name="parser">The parser.</param>
            <param name="simplifier">The simplifier.</param>
            <param name="differentiator">The differentiator.</param>
        </member>
        <member name="M:xFunc.Maths.Processor.#ctor(xFunc.Maths.ILexer,xFunc.Maths.IParser,xFunc.Maths.Analyzers.ISimplifier,xFunc.Maths.Analyzers.IDifferentiator,xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Processor" /> class.
            </summary>
            <param name="lexer">The lexer.</param>
            <param name="parser">The parser.</param>
            <param name="simplifier">The simplifier.</param>
            <param name="differentiator">The differentiator.</param>
            <param name="parameters">The collection of parameters.</param>
        </member>
        <member name="M:xFunc.Maths.Processor.Solve(System.String)">
            <summary>
            Solves the specified expression.
            </summary>
            <param name="function">The function.</param>
            <returns>The result of solving.</returns>
        </member>
        <member name="M:xFunc.Maths.Processor.Solve``1(System.String)">
            <summary>
            Solves the specified function.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="function">The function.</param>
            <returns>The result of solving.</returns>
        </member>
        <member name="M:xFunc.Maths.Processor.Simplify(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Simplifies the <paramref name="expression"/>.
            </summary>
            <param name="expression">A expression to simplify.</param>
            <returns>A simplified expression.</returns>
        </member>
        <member name="M:xFunc.Maths.Processor.Differentiate(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Differentiates the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <returns>Returns the derivative.</returns>
        </member>
        <member name="M:xFunc.Maths.Processor.Differentiate(xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.Variable)">
            <summary>
            Differentiates the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="variable">The variable.</param>
            <returns>Returns the derivative.</returns>
        </member>
        <member name="M:xFunc.Maths.Processor.Differentiate(xFunc.Maths.Expressions.IExpression,xFunc.Maths.Expressions.Variable,xFunc.Maths.Expressions.ExpressionParameters)">
            <summary>
            Differentiates the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="variable">The variable.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            Returns the derivative.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Processor.Parse(System.String)">
            <summary>
            Parses the specified function.
            </summary>
            <param name="function">The function.</param>
            <returns>The parsed expression.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="function"/> is null.</exception>
            <exception cref="T:xFunc.Maths.ParserException">Error while parsing.</exception>
        </member>
        <member name="P:xFunc.Maths.Processor.Lexer">
            <summary>
            Gets or sets a implementation of <see cref="T:xFunc.Maths.ILexer"/>.
            </summary>
        </member>
        <member name="P:xFunc.Maths.Processor.Parser">
            <summary>
            Gets or sets the parser.
            </summary>
            <value>
            The parser.
            </value>
        </member>
        <member name="P:xFunc.Maths.Processor.Simplifier">
            <summary>
            Gets or sets the simplifier.
            </summary>
            <value>
            The simplifier.
            </value>
        </member>
        <member name="P:xFunc.Maths.Processor.Differentiator">
            <summary>
            Gets or sets the differentiator.
            </summary>
            <value>
            The differentiator.
            </value>
        </member>
        <member name="P:xFunc.Maths.Processor.Parameters">
            <summary>
            Gets expression parameters object.
            </summary>
            <value>
            The expression parameters object.
            </value>
        </member>
        <member name="P:xFunc.Maths.Processor.NumeralSystem">
            <summary>
            Gets or sets the numeral system.
            </summary>
            <value>
            The numeral system.
            </value>
        </member>
        <member name="P:xFunc.Maths.Processor.DoSimplify">
            <summary>
            Gets or sets a value indicating whether do simplify or not.
            </summary>
        </member>
        <member name="T:xFunc.Maths.Results.ComplexNumberResult">
            <summary>
            Represents the numerical result.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Results.ComplexNumberResult.#ctor(System.Numerics.Complex)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Results.NumberResult"/> class.
            </summary>
            <param name="complex">The numerical representation of result.</param>
        </member>
        <member name="M:xFunc.Maths.Results.ComplexNumberResult.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="P:xFunc.Maths.Results.ComplexNumberResult.Result">
            <summary>
            Gets the numerical representation of result.
            </summary>
            <value>
            The numerical representation of result.
            </value>
        </member>
        <member name="T:xFunc.Maths.Results.IResult">
            <summary>
            Represents the result of calculation.
            </summary>
        </member>
        <member name="P:xFunc.Maths.Results.IResult.Result">
            <summary>
            Gets the result.
            </summary>
            <value>
            The result.
            </value>
        </member>
        <member name="T:xFunc.Maths.Results.ExpressionResult">
            <summary>
            Represents the result in the expression form.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Results.ExpressionResult.#ctor(xFunc.Maths.Expressions.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Results.ExpressionResult"/> class.
            </summary>
            <param name="exp">The expression.</param>
        </member>
        <member name="M:xFunc.Maths.Results.ExpressionResult.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="P:xFunc.Maths.Results.ExpressionResult.Result">
            <summary>
            Gets the result.
            </summary>
            <value>
            The result.
            </value>
        </member>
        <member name="T:xFunc.Maths.Results.NumberResult">
            <summary>
            Represents the numerical result.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Results.NumberResult.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Results.NumberResult"/> class.
            </summary>
            <param name="number">The numerical representation of result.</param>
        </member>
        <member name="M:xFunc.Maths.Results.NumberResult.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="P:xFunc.Maths.Results.NumberResult.Result">
            <summary>
            Gets the numerical representation of result.
            </summary>
            <value>
            The numerical representation of result.
            </value>
        </member>
        <member name="T:xFunc.Maths.Results.StringResult">
            <summary>
            Represents the string result
            </summary>
        </member>
        <member name="M:xFunc.Maths.Results.StringResult.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Results.StringResult"/> class.
            </summary>
            <param name="str">The string representation of result.</param>
        </member>
        <member name="M:xFunc.Maths.Results.StringResult.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="P:xFunc.Maths.Results.StringResult.Result">
            <summary>
            Gets the string representation of result.
            </summary>
            <value>
            The string representation of result.
            </value>
        </member>
        <member name="T:xFunc.Maths.Results.BooleanResult">
            <summary>
            Represents the boolean result.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Results.BooleanResult.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Results.BooleanResult"/> class.
            </summary>
            <param name="value">The value of result.</param>
        </member>
        <member name="M:xFunc.Maths.Results.BooleanResult.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="P:xFunc.Maths.Results.BooleanResult.Result">
            <summary>
            Gets the result.
            </summary>
            <value>
            The result.
            </value>
        </member>
        <member name="T:xFunc.Maths.NumeralSystem">
            <summary>
            Numeral systems.
            </summary>
        </member>
        <member name="F:xFunc.Maths.NumeralSystem.Binary">
            <summary>
            The binary numeral system.
            </summary>
        </member>
        <member name="F:xFunc.Maths.NumeralSystem.Octal">
            <summary>
            The octal numeral system.
            </summary>
        </member>
        <member name="F:xFunc.Maths.NumeralSystem.Decimal">
            <summary>
            The decimal numeral system.
            </summary>
        </member>
        <member name="F:xFunc.Maths.NumeralSystem.Hexidecimal">
            <summary>
            The hexidecimal numeral system.
            </summary>
        </member>
        <member name="T:xFunc.Maths.Resources.Resource">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:xFunc.Maths.Resources.Resource.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:xFunc.Maths.Resources.Resource.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:xFunc.Maths.Resources.Resource.AssignFunction">
            <summary>
              Looks up a localized string similar to The expression &apos;{1}&apos; was assigned to the function &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:xFunc.Maths.Resources.Resource.AssignVariable">
            <summary>
              Looks up a localized string similar to The value &apos;{1}&apos; was assigned to the variable &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:xFunc.Maths.Resources.Resource.ConstError">
            <summary>
              Looks up a localized string similar to You can&apos;t change constants..
            </summary>
        </member>
        <member name="P:xFunc.Maths.Resources.Resource.ErrorWhileParsingTree">
            <summary>
              Looks up a localized string similar to An error occurred while parsing the tree..
            </summary>
        </member>
        <member name="P:xFunc.Maths.Resources.Resource.FormatException">
            <summary>
              Looks up a localized string similar to The string &apos;{0}&apos; has an invalid format..
            </summary>
        </member>
        <member name="P:xFunc.Maths.Resources.Resource.FunctionNotFoundExceptionError">
            <summary>
              Looks up a localized string similar to The &apos;{0}&apos; function not found..
            </summary>
        </member>
        <member name="P:xFunc.Maths.Resources.Resource.InvalidExpression">
            <summary>
              Looks up a localized string similar to The expression is invalid..
            </summary>
        </member>
        <member name="P:xFunc.Maths.Resources.Resource.InvalidNumberOfVariables">
            <summary>
              Looks up a localized string similar to The function has an invalid number of variables..
            </summary>
        </member>
        <member name="P:xFunc.Maths.Resources.Resource.LessParams">
            <summary>
              Looks up a localized string similar to The number of parameters is less than expected..
            </summary>
        </member>
        <member name="P:xFunc.Maths.Resources.Resource.MatrixArgException">
            <summary>
              Looks up a localized string similar to The size of matrices is invalid..
            </summary>
        </member>
        <member name="P:xFunc.Maths.Resources.Resource.MoreParams">
            <summary>
              Looks up a localized string similar to The number of parameters is more than expected..
            </summary>
        </member>
        <member name="P:xFunc.Maths.Resources.Resource.NotBalanced">
            <summary>
              Looks up a localized string similar to Brackets are not balanced..
            </summary>
        </member>
        <member name="P:xFunc.Maths.Resources.Resource.NotEnoughParams">
            <summary>
              Looks up a localized string similar to Not enough parameters..
            </summary>
        </member>
        <member name="P:xFunc.Maths.Resources.Resource.NotSpecifiedFunction">
            <summary>
              Looks up a localized string similar to The function is not specified..
            </summary>
        </member>
        <member name="P:xFunc.Maths.Resources.Resource.NotSupportedSymbol">
            <summary>
              Looks up a localized string similar to The symbol &apos;{0}&apos; is not supported..
            </summary>
        </member>
        <member name="P:xFunc.Maths.Resources.Resource.ParameterTypeMismatchExceptionError">
            <summary>
              Looks up a localized string similar to Parameter type mismatch (Expected: {0}; Actual: {1})..
            </summary>
        </member>
        <member name="P:xFunc.Maths.Resources.Resource.ReadOnlyError">
            <summary>
              Looks up a localized string similar to You cannot change value of &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:xFunc.Maths.Resources.Resource.UndefineFunction">
            <summary>
              Looks up a localized string similar to The &apos;{0}&apos; function is removed..
            </summary>
        </member>
        <member name="P:xFunc.Maths.Resources.Resource.UndefineVariable">
            <summary>
              Looks up a localized string similar to The &apos;{0}&apos; variable is removed..
            </summary>
        </member>
        <member name="P:xFunc.Maths.Resources.Resource.UnexpectedError">
            <summary>
              Looks up a localized string similar to Unexpected error..
            </summary>
        </member>
        <member name="P:xFunc.Maths.Resources.Resource.VariableNotFoundExceptionError">
            <summary>
              Looks up a localized string similar to The &apos;{0}&apos; variable not found..
            </summary>
        </member>
        <member name="P:xFunc.Maths.Resources.Resource.VectorCrossException">
            <summary>
              Looks up a localized string similar to The size of vector should equal to 3..
            </summary>
        </member>
        <member name="T:xFunc.Maths.Tokens.BooleanToken">
            <summary>
            Represents the boolean token.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Tokens.BooleanToken.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Tokens.BooleanToken"/> class.
            </summary>
            <param name="value">The value of this token.</param>
        </member>
        <member name="M:xFunc.Maths.Tokens.BooleanToken.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Tokens.BooleanToken.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Tokens.BooleanToken.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="P:xFunc.Maths.Tokens.BooleanToken.Priority">
            <summary>
            Gets a priority of current token.
            </summary>
        </member>
        <member name="P:xFunc.Maths.Tokens.BooleanToken.Value">
            <summary>
            Gets a value.
            </summary>
            <value>
            The value of this token.
            </value>
        </member>
        <member name="T:xFunc.Maths.Tokens.ComplexNumberToken">
            <summary>
            Represent complex number token.
            </summary>
            <seealso cref="T:xFunc.Maths.Tokens.IToken" />
        </member>
        <member name="M:xFunc.Maths.Tokens.ComplexNumberToken.#ctor(System.Numerics.Complex)">
            <summary>
            Initializes a new instance of the <see cref="T:xFunc.Maths.Tokens.ComplexNumberToken"/> class.
            </summary>
            <param name="complex">The complex number.</param>
        </member>
        <member name="M:xFunc.Maths.Tokens.ComplexNumberToken.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:xFunc.Maths.Tokens.ComplexNumberToken.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Tokens.ComplexNumberToken.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="P:xFunc.Maths.Tokens.ComplexNumberToken.Priority">
            <summary>
            Gets a priority of current token.
            </summary>
        </member>
        <member name="P:xFunc.Maths.Tokens.ComplexNumberToken.Number">
            <summary>
            Gets the complex number.
            </summary>
            <value>
            The complex number.
            </value>
        </member>
        <member name="T:xFunc.Maths.Tokens.Functions">
            <summary>
            Specifies functions.
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Add">
            <summary>
            The Add function
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Sub">
            <summary>
            The Sub function
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Mul">
            <summary>
            The Mul function
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Div">
            <summary>
            The Div function
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Pow">
            <summary>
            The Pow function
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Absolute">
            <summary>
            abs
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Sine">
            <summary>
            sin
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Cosine">
            <summary>
            cos
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Tangent">
            <summary>
            tg
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Cotangent">
            <summary>
            Cot
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Secant">
            <summary>
            sec
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Cosecant">
            <summary>
            csc
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Arcsine">
            <summary>
            Arcsin
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Arccosine">
            <summary>
            Arccos
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Arctangent">
            <summary>
            Arctan
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Arccotangent">
            <summary>
            Arccot
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Arcsecant">
            <summary>
            arcsec
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Arccosecant">
            <summary>
            arccsc
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Sqrt">
            <summary>
            sqrt
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Root">
            <summary>
            root
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Ln">
            <summary>
            Ln
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Lg">
            <summary>
            Lg
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Lb">
            <summary>
            Lb
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Log">
            <summary>
            Log
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Sineh">
            <summary>
            sinh
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Cosineh">
            <summary>
            cosh
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Tangenth">
            <summary>
            tanh
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Cotangenth">
            <summary>
            coth
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Secanth">
            <summary>
            sech
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Cosecanth">
            <summary>
            csch
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Arsineh">
            <summary>
            arsinh
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Arcosineh">
            <summary>
            arcosh
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Artangenth">
            <summary>
            artanh
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Arcotangenth">
            <summary>
            arcoth
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Arsecanth">
            <summary>
            arsech
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Arcosecanth">
            <summary>
            arcsch
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Exp">
            <summary>
            Exponential
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.GCD">
            <summary>
            Greatest common divisor
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.LCM">
            <summary>
            Least common multiple
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Factorial">
            <summary>
            fact
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Sum">
            <summary>
            Summation
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Product">
            <summary>
            Product
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Round">
            <summary>
            round
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Floor">
            <summary>
            floor
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Ceil">
            <summary>
            ceil
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.If">
            <summary>
            if
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.For">
            <summary>
            for
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.While">
            <summary>
            while
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Del">
            <summary>
            The "Del" operator.
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Derivative">
            <summary>
            deriv
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Simplify">
            <summary>
            simplify
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Define">
            <summary>
            def
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Undefine">
            <summary>
            undef
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Transpose">
            <summary>
            transpose
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Determinant">
            <summary>
            determinant, det
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Inverse">
            <summary>
            inverse
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Vector">
            <summary>
            vector
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Matrix">
            <summary>
            matrix
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Re">
            <summary>
            re (returns real part of complex number)
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Im">
            <summary>
            im (returns imaginary part of complex number)
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Phase">
            <summary>
            phase
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Conjugate">
            <summary>
            conjugate
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Reciprocal">
            <summary>
            reciprocal
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.UserFunction">
            <summary>
            The user function
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Min">
            <summary>
            The Min function
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Max">
            <summary>
            The Max function
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Avg">
            <summary>
            The Avg function
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Count">
            <summary>
            The Count function
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Var">
            <summary>
            The VAR function
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Varp">
            <summary>
            The VARP function
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Stdev">
            <summary>
            The STDEV function
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Functions.Stdevp">
            <summary>
            The STDEVP function
            </summary>
        </member>
        <member name="T:xFunc.Maths.Tokens.FunctionToken">
            <summary>
            Represents a function token.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Tokens.FunctionToken.#ctor(xFunc.Maths.Tokens.Functions)">
            <summary>
            Initializes the <see cref="T:xFunc.Maths.Tokens.FunctionToken" /> class.
            </summary>
            <param name="function">A function.</param>
        </member>
        <member name="M:xFunc.Maths.Tokens.FunctionToken.#ctor(xFunc.Maths.Tokens.Functions,System.Int32)">
            <summary>
            Initializes the <see cref="T:xFunc.Maths.Tokens.FunctionToken" /> class.
            </summary>
            <param name="function">A function.</param>
            <param name="countOfParams">The count of parameters.</param>
        </member>
        <member name="M:xFunc.Maths.Tokens.FunctionToken.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:xFunc.Maths.Tokens.FunctionToken.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Tokens.FunctionToken.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="P:xFunc.Maths.Tokens.FunctionToken.Priority">
            <summary>
            Gets a priority of current token.
            </summary>
        </member>
        <member name="P:xFunc.Maths.Tokens.FunctionToken.Function">
            <summary>
            Gets the function.
            </summary>
        </member>
        <member name="P:xFunc.Maths.Tokens.FunctionToken.CountOfParams">
            <summary>
            Gets the count of parameters.
            </summary>
            <value>
            The count of parameters.
            </value>
        </member>
        <member name="T:xFunc.Maths.Tokens.IToken">
            <summary>
            Represents a token.
            </summary>
        </member>
        <member name="P:xFunc.Maths.Tokens.IToken.Priority">
            <summary>
            Gets a priority of current token.
            </summary>
        </member>
        <member name="T:xFunc.Maths.Tokens.NumberToken">
            <summary>
            Represents a number token.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Tokens.NumberToken.#ctor(System.Double)">
            <summary>
            Initializes the <see cref="T:xFunc.Maths.Tokens.NumberToken"/> class.
            </summary>
            <param name="number">A number.</param>
        </member>
        <member name="M:xFunc.Maths.Tokens.NumberToken.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:xFunc.Maths.Tokens.NumberToken.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Tokens.NumberToken.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="P:xFunc.Maths.Tokens.NumberToken.Priority">
            <summary>
            Gets a priority of current token.
            </summary>
        </member>
        <member name="P:xFunc.Maths.Tokens.NumberToken.Number">
            <summary>
            Gets the number.
            </summary>
        </member>
        <member name="T:xFunc.Maths.Tokens.Operations">
            <summary>
            Specifies operations.
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Operations.Addition">
            <summary>
            +
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Operations.Subtraction">
            <summary>
            -
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Operations.Multiplication">
            <summary>
            *
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Operations.Division">
            <summary>
            /
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Operations.Exponentiation">
            <summary>
            ^
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Operations.UnaryMinus">
            <summary>
            - (Unary)
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Operations.Factorial">
            <summary>
            !
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Operations.Modulo">
            <summary>
            %, mod
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Operations.ConditionalAnd">
            <summary>
            &amp;&amp;
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Operations.ConditionalOr">
            <summary>
            ||
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Operations.Equal">
            <summary>
            ==
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Operations.NotEqual">
            <summary>
            !=
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Operations.LessThan">
            <summary>
            &lt;
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Operations.LessOrEqual">
            <summary>
            &lt;=
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Operations.GreaterThan">
            <summary>
            &gt;
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Operations.GreaterOrEqual">
            <summary>
            &gt;=
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Operations.Increment">
            <summary>
            The increment (++)
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Operations.Decrement">
            <summary>
            The decrement (--)
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Operations.AddAssign">
            <summary>
            +=
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Operations.SubAssign">
            <summary>
            -=
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Operations.MulAssign">
            <summary>
            *=
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Operations.DivAssign">
            <summary>
            /=
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Operations.Assign">
            <summary>
            :=
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Operations.Not">
            <summary>
            ~, not
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Operations.And">
            <summary>
            &amp;, and
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Operations.Or">
            <summary>
            |, or
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Operations.XOr">
            <summary>
            xor
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Operations.Implication">
            <summary>
            =>, ->, impl
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Operations.Equality">
            <summary>
            &lt;=>, &lt;->, eq
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Operations.NOr">
            <summary>
            nor
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Operations.NAnd">
            <summary>
            nand
            </summary>
        </member>
        <member name="T:xFunc.Maths.Tokens.OperationToken">
            <summary>
            Represents a operation token.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Tokens.OperationToken.#ctor(xFunc.Maths.Tokens.Operations)">
            <summary>
            Initializes the <see cref="T:xFunc.Maths.Tokens.OperationToken"/> class.
            </summary>
            <param name="operation">A operation.</param>
        </member>
        <member name="M:xFunc.Maths.Tokens.OperationToken.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:xFunc.Maths.Tokens.OperationToken.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Tokens.OperationToken.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="P:xFunc.Maths.Tokens.OperationToken.Priority">
            <summary>
            Gets a priority of current token.
            </summary>
        </member>
        <member name="P:xFunc.Maths.Tokens.OperationToken.Operation">
            <summary>
            Gets the operation.
            </summary>
        </member>
        <member name="T:xFunc.Maths.Tokens.Symbols">
            <summary>
            Describes special symbols. 
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Symbols.OpenBracket">
            <summary>
            (
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Symbols.CloseBracket">
            <summary>
            )
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Symbols.OpenBrace">
            <summary>
            {
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Symbols.CloseBrace">
            <summary>
            }
            </summary>
        </member>
        <member name="F:xFunc.Maths.Tokens.Symbols.Comma">
            <summary>
            ,
            </summary>
        </member>
        <member name="T:xFunc.Maths.Tokens.SymbolToken">
            <summary>
            Represents a symbol token.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Tokens.SymbolToken.#ctor(xFunc.Maths.Tokens.Symbols)">
            <summary>
            Initializes the <see cref="T:xFunc.Maths.Tokens.SymbolToken"/> class.
            </summary>
            <param name="symbol">A symbol.</param>
        </member>
        <member name="M:xFunc.Maths.Tokens.SymbolToken.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:xFunc.Maths.Tokens.SymbolToken.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Tokens.SymbolToken.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="P:xFunc.Maths.Tokens.SymbolToken.Priority">
            <summary>
            Gets a priority of current token.
            </summary>
        </member>
        <member name="P:xFunc.Maths.Tokens.SymbolToken.Symbol">
            <summary>
            Gets the symbol.
            </summary>
        </member>
        <member name="T:xFunc.Maths.Tokens.UserFunctionToken">
            <summary>
            Represents a user-function token.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Tokens.UserFunctionToken.#ctor(System.String)">
            <summary>
            Initializes the <see cref="T:xFunc.Maths.Tokens.UserFunctionToken"/> class.
            </summary>
            <param name="functionName">A name of function.</param>
        </member>
        <member name="M:xFunc.Maths.Tokens.UserFunctionToken.#ctor(System.String,System.Int32)">
            <summary>
            Initializes the <see cref="T:xFunc.Maths.Tokens.UserFunctionToken"/> class.
            </summary>
            <param name="functionName">A name of function.</param>
            <param name="countOfParams">A count of parameters.</param>
        </member>
        <member name="M:xFunc.Maths.Tokens.UserFunctionToken.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:xFunc.Maths.Tokens.UserFunctionToken.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Tokens.UserFunctionToken.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="P:xFunc.Maths.Tokens.UserFunctionToken.FunctionName">
            <summary>
            Gets the name of function.
            </summary>
        </member>
        <member name="T:xFunc.Maths.Tokens.VariableToken">
            <summary>
            Represents a variable token.
            </summary>
        </member>
        <member name="M:xFunc.Maths.Tokens.VariableToken.#ctor(System.String)">
            <summary>
            Initializes the <see cref="T:xFunc.Maths.Tokens.VariableToken"/> class.
            </summary>
            <param name="variable">A name of variable.</param>
        </member>
        <member name="M:xFunc.Maths.Tokens.VariableToken.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:xFunc.Maths.Tokens.VariableToken.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:xFunc.Maths.Tokens.VariableToken.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="P:xFunc.Maths.Tokens.VariableToken.Priority">
            <summary>
            Gets a priority of current token.
            </summary>
        </member>
        <member name="P:xFunc.Maths.Tokens.VariableToken.Variable">
            <summary>
            Gets a name of variable.
            </summary>
        </member>
    </members>
</doc>
