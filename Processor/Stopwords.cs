using System.Collections.Generic;
using System.Collections.ObjectModel;

namespace Processor
{
    public static class Stopwords
    {
        /// <summary>
        /// Java stopwords from the global frequency list with a threshold >=200000.
        /// </summary>
        private static readonly IList<string> JAVA_STOPWORDS = new ReadOnlyCollection<string>(new List<string> { "the", "get", "public", "string", "if", "new", "0", "this", "of", "return", "set", "1", "to", "a", "is", "int", "name", "exception", "import", "null", "i", "for", "value", "2", "u", "java", "class", "void", "type", "in", "or", "and", "file", "object", "add", "code", "private", "j", "id", "list", "org", "x", "data", "param", "e", "static", "license", "final", "not", "c", "text", "event", "it", "boolean", "node", "3", "element", "be", "key", "throws", "p", "true", "by", "action", "index", "software", "else", "s", "field", "with", "m", "0000", "util", "size", "false", "version", "that", "any", "as", "length", "com", "n", "out", "case", "xml", "test", "message", "from", "you", "method", "f", "b", "map", "equals", "model", "property", "t", "array", "table", "user", "4", "attribute", "gnu", "context", "item", "see", "error", "system", "io", "result", "an", "d", "listener", "package", "panel", "general", "create", "all", "next", "default", "stream", "free", "at", "log", "on", "source", "byte", "catch", "without", "y", "date", "copyright", "javax", "input", "current", "line", "try", "info", "write", "label", "button", "double", "instance", "end", "http", "append", "throw", "protected", "time", "are", "path", "start", "l", "color", "state", "factory", "5", "long", "has", "v", "use", "sql", "no", "number", "buffer", "component", "iterator", "image", "request", "will", "under", "apache", "integer", "column", "println", "layout", "menu", "can", "super", "count", "manager", "foundation", "copy", "warranty", "document", "assert", "group", "token", "swing", "check", "read", "resource", "r", "awt", "net", "author", "url", "tree", "put", "lang", "output", "row", "but", "link", "extends", "should", "print", "content", "parent", "view", "parameter", "char", "hash", "remove", "service", "grid", "format", "option", "tag", "break", "session", "returns", "server", "form", "do", "entry", "width", "terms", "target", "library", "o", "connection", "pane", "page", "may", "program", "implied", "8", "more", "have", "font", "last", "query", "description", "6", "frame", "bean", "max", "distributed", "names", "vector", "update", "handler", "abstract", "values", "base", "impl", "db", "used", "selected", "border", "properties", "g", "first", "logger", "child", "parse", "while", "status", "entity", "obj", "10", "debug", "7", "filter", "constraints", "command", "box", "your", "float", "height", "inc", "other", "modify", "point", "config", "dialog", "interface", "either", "local", "www", "change", "purpose", "particular", "writer", "offset", "client", "core", "found", "details", "close", "str", "servlet", "which", "fitness", "msg", "bag", "doc", "even", "collection", "find", "9", "position", "icon", "merchantability", "html", "conditions", "project", "root", "must", "stack", "pos", "statement", "window", "de", "jj", "level", "selection", "open", "one", "thread", "instanceof", "non", "title", "editor", "w", "we", "response", "address", "00", "reader", "only", "uri", "style", "types", "received", "display", "enabled", "header", "ui", "my", "location", "parser", "q", "elements", "order", "num", "useful", "part", "published", "process", "suite", "constants", "implements", "block", "main", "lesser", "init", "store", "attributes", "database", "h", "ex", "ast", "load", "reference", "redistribute", "expression", "search", "trace", "empty", "module", "mode", "later", "short", "show", "delete", "hope", "arg", "access", "select", "along", "argument", "cell", "val", "args", "usa", "ma", "specified", "generated", "when", "ref", "left", "sun", "provided", "control", "runtime", "given", "standard", "simple", "mouse", "created", "directory", "right", "language", "min", "record", "container", "bytes", "following", "work", "k", "dir", "contains", "graph", "save", "application", "rights", "cache", "vm", "illegal", "boston", "configuration", "primary", "files", "port", "such", "framework", "utils", "exp", "ret", "options", "constructor", "call", "operation", "information", "so", "params", "bar", "range", "common", "area", "cim", "12", "including", "br", "changed", "gui", "function", "parameters", "namespace", "permission", "li", "revision", "edit", "z", "template", "task", "2003", "place", "handle", "definition", "tmp", "sets", "schema", "sb", "methods", "attr", "tt", "api", "2005", "math", "run", "remote", "variable", "temp", "top", "11", "2004", "sub", "buf", "old", "sax", "tool", "up", "objects", "invalid", "loader", "meta", "59", "16", "unit", "report", "2006", "err", "synchronized", "internal", "active", "axis", "descriptor", "mapping", "make", "begin", "transaction", "pattern", "category", "insert", "td", "reserved", "required", "was", "character", "kind", "role", "tab", "performed", "col", "password", "match", "where", "eclipse", "fields", "specific", "domain", "valid", "var", "security", "rs", "execute", "calendar", "host", "sf", "len", "body", "its", "src", "builder", "20", "keys", "web", "notice", "plugin", "prefix", "warranties", "feature", "helper", "visible", "into", "dom", "substring", "sourceforge", "bounds", "dimension", "idx", "implementation", "draw", "flag", "nodes", "original", "whether", "locale", "otherwise", "330", "since", "02111", "rule", "temple", "1307", "sequence", "adapter", "send", "fill", "swt", "binary", "iter", "initial", "messages", "scroll", "called", "space", "desc", "account", "18", "above", "results", "clear", "proxy", "children", "st", "channel", "build", "move", "res", "been", "each", "pre", "subject", "xmlbeans", "switch", "center", "gen", "graphics", "owner", "ignore", "combo", "identifier", "provider", "after", "pool", "01", "ok", "settings", "2002", "interfaces", "member", "there", "available", "support", "does", "tc", "engine", "op", "renderer", "comment", "ch", "contact", "using", "creates", "2001", "contributors", "limited", "todo", "items", "filename", "encoding", "note", "modified", "background", "then", "app", "la", "15", "socket", "13", "game", "edge", "product", "player", "paint", "lt", "def", "home", "based", "word", "components", "queue", "controller", "32", "insets", "folder", "special" });

        /// <summary>
        /// C reserved words.
        /// </summary>
        private static readonly IList<string> C_STOPWORDS = new ReadOnlyCollection<string>(new List<string> { "auto", "break", "case", "char", "const", "continue", "default", "do", "int", "long", "register", "return", "short", "signed", "sizeof", "static", "struct", "switch", "typedef", "union", "unsigned", "void", "volatile", "while", "double", "else", "enum", "extern", "float", "for", "goto", "if" });

        /// <summary>
        /// C++ reserved words.
        /// </summary>
private static readonly IList<string> CPLUS_STOPWORDS = new ReadOnlyCollection<string>(new List<string> { "alignas", "alignof", "and", "and_eq", "asm", "atomic_cancel", "atomic_commit", "atomic_noexcept", "auto", "bitand", "bitor", "bool", "break", "case", "catch", "char", "char16_t", "char32_t", "class", "compl", "concept", "const", "constexpr", "const_cast", "continue", "co_await", "co_return", "co_yield", "decltype", "default", "delete", "do", "double", "dynamic_cast", "else", "enum", "explicit", "export", "extern", "false", "float", "for", "friend", "goto", "if", "import", "inline", "int", "long", "module", "mutable", "namespace", "new", "noexcept", "not", "not_eq", "nullptr", "operator", "or", "or_eq", "private", "protected", "public", "register", "reinterpret_cast", "requires", "return", "short", "signed", "sizeof", "static", "static_assert", "static_cast", "struct", "switch", "synchronized", "template", "this", "thread_local", "throw", "true", "try", "typedef", "typeid", "typename", "union", "unsigned", "using", "virtual", "void", "volatile", "wchar_t", "while", "xor", "xor_eq", "elif", "endif", "defined", "ifdef", "ifndef", "define", "undef", "include", "line", "error", "pragma" });

        /// <summary>
        /// C# reserved words.
        /// </summary>
private static readonly IList<string> CSHARP_STOPWORDS = new ReadOnlyCollection<string>(new List<string> { "abstract", "as", "base", "bool", "break", "byte", "case", "catch", "char", "checked", "class", "const", "continue", "decimal", "default", "delegate", "do", "double", "else", "enum", "event", "explicit", "extern", "false", "finally", "fixed", "float", "for", "foreach", "goto", "if", "implicit", "in", "int", "interface", "internal", "is", "lock", "long", "namespace", "new", "null", "object", "operator", "out", "override", "params", "private", "protected", "public", "readonly", "ref", "return", "sbyte", "sealed", "short", "sizeof", "stackalloc", "static", "string", "struct", "switch", "this", "throw", "true", "try", "typeof", "uint", "ulong", "unchecked", "unsafe", "ushort", "using", "using", "static", "virtual", "void", "add", "alias", "ascending", "async", "await", "descending", "dynamic", "from", "get", "global", "group", "into", "join", "let", "nameof", "orderby", "partial", "remove", "select", "set", "value", "var", "when", "where", "where", "yield" });

        /// <summary>
        /// Stopwords dictionary for supported file extensions.
        /// </summary>
        public static Dictionary<string, IList<string>> stopwordLists = new Dictionary<string, IList<string>>
        {
            { ".java", JAVA_STOPWORDS },
            { ".c", C_STOPWORDS },
            { ".cpp", CPLUS_STOPWORDS },
            { ".cs", CSHARP_STOPWORDS },
        };
    }
}
